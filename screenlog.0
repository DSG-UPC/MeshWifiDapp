WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 1f b2 b4 70>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 1f b2 b4 70>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'L/+I3mrHV7OkhAnWuNEG4Q=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'kMmpv5PRyf1mxNNB8yCo9DGxOfU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'kMmpv5PRyf1mxNNB8yCo9DGxOfU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242
contract address: 0xc0B534e3Ec66D363B064E1Cbf9c72Dda6bB9755C
starting event monitoring on contract: 0xc0B534e3Ec66D363B064E1Cbf9c72Dda6bB9755C
(node:26430) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 15 c0 31 cc>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 15 c0 31 cc>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'47Wubm5Ldgk8YUy+YFqpmQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'A+iZGgYRGmcmkf8Q1FtiGeO1mdE='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'A+iZGgYRGmcmkf8Q1FtiGeO1mdE='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242
contract address: 0xc0B534e3Ec66D363B064E1Cbf9c72Dda6bB9755C
starting event monitoring on contract: 0x970e9Eb0C63f6DEc756d60cB55047FE77a518807
(node:26671) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 106
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x8ca80f7ee86f0264e12256a22a2514bc759a9e79ebecd0567f822e6f4c1c2f52",
  "blockHash": "0xe6fd393477c74a34a790d8bfb570c5e697d6d0f752910ab80136f5e52d44960f",
  "blockNumber": 70,
  "address": "0x970e9Eb0C63f6DEc756d60cB55047FE77a518807",
  "type": "mined",
  "id": "log_67681eea",
  "returnValues": {
    "0": "0xf17ddd4120cb660f6f34c057b2a952f49d251da0c015bcb5458baba1dff2ca41",
    "1": "0xf9C59a9A2e3045BaAC3e8aAfda53e9dBbFC4a149",
    "2": "recalculate_max_price",
    "3": "0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242",
    "4": "106",
    "5": "1000000",
    "6": "1",
    "id": "0xf17ddd4120cb660f6f34c057b2a952f49d251da0c015bcb5458baba1dff2ca41",
    "recipient": "0xf9C59a9A2e3045BaAC3e8aAfda53e9dBbFC4a149",
    "queryType": "recalculate_max_price",
    "originator": "0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242",
    "owed": "106",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xf17ddd4120cb660f6f34c057b2a952f49d251da0c015bcb5458baba1dff2ca41000000000000000000000000f9c59a9a2e3045baac3e8aafda53e9dbbfc4a14900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006ba4ca7a92346529cd2990043f9c1b6cec5d4242000000000000000000000000000000000000000000000000000000000000006a00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 106;
Funds: 1000000;
PricePerMB: 1;

New price is: 9433
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 26 5e cc 9d>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 26 5e cc 9d>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'R7xvxayMPpFF1tJHJROabw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Uxz0qn0IFtHHP5OXN3Qe0Jp1wOc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Uxz0qn0IFtHHP5OXN3Qe0Jp1wOc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x9fD185A9b0d08588B3315D968Ee469afBe22D54C
contract address: 0xF4e0134993979AE900CFcdDC6F9Bd92BaE863905
starting event monitoring on contract: 0x9722b4Df5944bCBFd1F6aeDb60eb4d789986A0C6
(node:27455) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 24
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xd592858158ce4473bf6645ebf648d5b34c35fd1d9f6632b8e43594497ae652d4",
  "blockHash": "0xb03e56a8507231db7a74a070733ebd5d822a35430dbe0cc4fba28983ffabfbf6",
  "blockNumber": 29,
  "address": "0x9722b4Df5944bCBFd1F6aeDb60eb4d789986A0C6",
  "type": "mined",
  "id": "log_32c24c59",
  "returnValues": {
    "0": "0xc9611b6b9e1035018f30c1d8810bc521ae4801c13bf5d233d1dc0b7b86c07c7c",
    "1": "0x54D634461833e67339a074a065B1d3114AC20940",
    "2": "recalculate_max_price",
    "3": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "4": "24",
    "5": "1000000",
    "6": "1",
    "id": "0xc9611b6b9e1035018f30c1d8810bc521ae4801c13bf5d233d1dc0b7b86c07c7c",
    "recipient": "0x54D634461833e67339a074a065B1d3114AC20940",
    "queryType": "recalculate_max_price",
    "originator": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "owed": "24",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xc9611b6b9e1035018f30c1d8810bc521ae4801c13bf5d233d1dc0b7b86c07c7c00000000000000000000000054d634461833e67339a074a065b1d3114ac2094000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000009fd185a9b0d08588b3315d968ee469afbe22d54c000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 24;
Funds: 1000000;
PricePerMB: 1;

New price is: 41666
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer fc b2 2d dd>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer fc b2 2d dd>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'x80I5TYz1AsS03x/w0olrg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'9UatjhKSlUdtmkI2MnQIRDN8rLU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'9UatjhKSlUdtmkI2MnQIRDN8rLU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x9fD185A9b0d08588B3315D968Ee469afBe22D54C
contract address: 0xF4e0134993979AE900CFcdDC6F9Bd92BaE863905
starting event monitoring on contract: 0x679fca13D3ccB827682997957968Bd7D01de3737
(node:27619) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 38
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xdff9b490d49747970cc0bc8c7909222e84b5a7589b8594d3e5beb238ddd5997b",
  "blockHash": "0x309a556ecaf38ac47fff5290c990e73eb05b2b52341d7987c25bbfcc403dc342",
  "blockNumber": 46,
  "address": "0x679fca13D3ccB827682997957968Bd7D01de3737",
  "type": "mined",
  "id": "log_64b61a42",
  "returnValues": {
    "0": "0x1cc99e689d84a3ecae812bdb0b91ea75a46a6c396372fb448884aedee5a20b86",
    "1": "0x70e0dDA30f433BB64432e9bbb10c2ebaF5E0A203",
    "2": "recalculate_max_price",
    "3": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "4": "38",
    "5": "1000000",
    "6": "1",
    "id": "0x1cc99e689d84a3ecae812bdb0b91ea75a46a6c396372fb448884aedee5a20b86",
    "recipient": "0x70e0dDA30f433BB64432e9bbb10c2ebaF5E0A203",
    "queryType": "recalculate_max_price",
    "originator": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "owed": "38",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x1cc99e689d84a3ecae812bdb0b91ea75a46a6c396372fb448884aedee5a20b8600000000000000000000000070e0dda30f433bb64432e9bbb10c2ebaf5e0a20300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000009fd185a9b0d08588b3315d968ee469afbe22d54c000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 38;
Funds: 1000000;
PricePerMB: 1;

New price is: 26315
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 2e ba 24 b2>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 2e ba 24 b2>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'loubZqPm8RUq6yXJhiPEkA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Cc2yp54oGaIcgljFAgKYhs4Kfbk='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Cc2yp54oGaIcgljFAgKYhs4Kfbk='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x23a5C670fb21ba233C11836421D91A9D4D18EAb3
contract address: 0xF4e0134993979AE900CFcdDC6F9Bd92BaE863905
starting event monitoring on contract: 0x408458896b30640cB924eD60318a3505899e9b75
(node:27830) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 63
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x3051dd0baa070c517edf8b2a738a8e70ef2a8434b7905b9708545d66e5e836c6",
  "blockHash": "0x408ac734db607fac534b09b0a1716eb5cfcb1c704f952134359d2833ac3bf25a",
  "blockNumber": 16,
  "address": "0x408458896b30640cB924eD60318a3505899e9b75",
  "type": "mined",
  "id": "log_c8fc3d5e",
  "returnValues": {
    "0": "0x2cd5a49c491486202a6ac00dabaef1090394afbf726c77ffe6d8ecede4351ccc",
    "1": "0xE1370cD529D263403BAdFCaFc8CC58ba285B4179",
    "2": "recalculate_max_price",
    "3": "0x23a5C670fb21ba233C11836421D91A9D4D18EAb3",
    "4": "63",
    "5": "1000000",
    "6": "1",
    "id": "0x2cd5a49c491486202a6ac00dabaef1090394afbf726c77ffe6d8ecede4351ccc",
    "recipient": "0xE1370cD529D263403BAdFCaFc8CC58ba285B4179",
    "queryType": "recalculate_max_price",
    "originator": "0x23a5C670fb21ba233C11836421D91A9D4D18EAb3",
    "owed": "63",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x2cd5a49c491486202a6ac00dabaef1090394afbf726c77ffe6d8ecede4351ccc000000000000000000000000e1370cd529d263403badfcafc8cc58ba285b417900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000023a5c670fb21ba233c11836421d91a9d4d18eab3000000000000000000000000000000000000000000000000000000000000003f00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 63;
Funds: 1000000;
PricePerMB: 1;

New price is: 15873
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer f7 16 d0 68>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer f7 16 d0 68>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'U8ERgiRBqEA6OYTQMkiGjw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'8dX2dNgVIk1PYsrqTKW/Jw+Hnn0='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'8dX2dNgVIk1PYsrqTKW/Jw+Hnn0='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xF4ef977e3Dc3582E2e4147ED96B3A1704391E0c6
(node:14215) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer d6 34 06 24>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer d6 34 06 24>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'GF/9mquiR5oB57sxJbQo6w=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Q5Z9Eaq6cimhImjwsNaHyCngLok='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Q5Z9Eaq6cimhImjwsNaHyCngLok='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x056e92016b77FFEFA35Ce57e0e6EC719dd9C0680
(node:14363) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 105
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xfdef7dcb7057be7c83116fa7aa23f9f130cce6d31d14774b8741b7d63cde9fc5",
  "blockHash": "0xf9903656682f61f3ef701a0f8f0a6c7515a2559eb5bedf78a42faa8f5d6242f1",
  "blockNumber": 59,
  "address": "0x056e92016b77FFEFA35Ce57e0e6EC719dd9C0680",
  "type": "mined",
  "id": "log_13ff4e1e",
  "returnValues": {
    "0": "0xe76e28c9f6e9622b283531084caa2b71b945e4689b3eeb893f1c90074d77adc4",
    "1": "0xB719542489c6fe5eC605487375d9640D3da554EA",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "105",
    "5": "1000000",
    "6": "1",
    "id": "0xe76e28c9f6e9622b283531084caa2b71b945e4689b3eeb893f1c90074d77adc4",
    "recipient": "0xB719542489c6fe5eC605487375d9640D3da554EA",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "105",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xe76e28c9f6e9622b283531084caa2b71b945e4689b3eeb893f1c90074d77adc4000000000000000000000000b719542489c6fe5ec605487375d9640d3da554ea00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 105;
Funds: 1000000;
PricePerMB: 1;

New price is: 9523
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 1b df 36 c3>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 1b df 36 c3>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'C6iooJhhJQdhC1qnpqm0Nw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'ltfAvJU4nae0kSA9B4OWUS+qG3U='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'ltfAvJU4nae0kSA9B4OWUS+qG3U='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xA835dB2d786ee176D7caD71118f66ee8aFCe6523
(node:14575) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 40
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x3a3cba9670a953b76ece53a9ad735ee6dcbbdb508bf90f717d37cbc709166d9b",
  "blockHash": "0x28725ca1ec919bb434815ea5860cc8e013961058002d9cee79999859faf0541b",
  "blockNumber": 76,
  "address": "0xA835dB2d786ee176D7caD71118f66ee8aFCe6523",
  "type": "mined",
  "id": "log_b2eeb35c",
  "returnValues": {
    "0": "0x0dfa1d99dfd52a4d6fe0d15c2eae49aa3923021dfcfb05fe82cb87e67f13dfbd",
    "1": "0xC9A0d8c29E973643302B0e216a3336136c04dd6d",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "40",
    "5": "1000000",
    "6": "1",
    "id": "0x0dfa1d99dfd52a4d6fe0d15c2eae49aa3923021dfcfb05fe82cb87e67f13dfbd",
    "recipient": "0xC9A0d8c29E973643302B0e216a3336136c04dd6d",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "40",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x0dfa1d99dfd52a4d6fe0d15c2eae49aa3923021dfcfb05fe82cb87e67f13dfbd000000000000000000000000c9a0d8c29e973643302b0e216a3336136c04dd6d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 40;
Funds: 1000000;
PricePerMB: 1;

New price is: 25000
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer d6 30 ca d5>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer d6 30 ca d5>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'oTXHy/DkfzqSgTHT/HQlag=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'v2hYf5sgSIeHBfCzLg2ts7xUYWc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'v2hYf5sgSIeHBfCzLg2ts7xUYWc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x4ebfAe10f8cfa175664a2986128170482Ee6Ac6a
(node:14703) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 83
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x895c35937d29f139ddf36764d400cfc88a75ab31d1627c2c0a3c0e501c9394b3",
  "blockHash": "0x34435f8b87407e4bb196cf560b1811eb55c47e7fd04ea97c30a3a4c293906f94",
  "blockNumber": 93,
  "address": "0x4ebfAe10f8cfa175664a2986128170482Ee6Ac6a",
  "type": "mined",
  "id": "log_d65b974b",
  "returnValues": {
    "0": "0x04d17e3b5a38550b5e05a60153d398c785c025ad999ff2d5ccfe35d9a766e6db",
    "1": "0x72bc13aE09FF8c492dE108e4901Ab3319E3639bE",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "83",
    "5": "1000000",
    "6": "1",
    "id": "0x04d17e3b5a38550b5e05a60153d398c785c025ad999ff2d5ccfe35d9a766e6db",
    "recipient": "0x72bc13aE09FF8c492dE108e4901Ab3319E3639bE",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "83",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x04d17e3b5a38550b5e05a60153d398c785c025ad999ff2d5ccfe35d9a766e6db00000000000000000000000072bc13ae09ff8c492de108e4901ab3319e3639be00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000005300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 83;
Funds: 1000000;
PricePerMB: 1;

New price is: 12048
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 27 1e 76 3a>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 27 1e 76 3a>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'yawmSa1zSzONIdQW41nJEg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'8YJ1K8QWj4qZktBUwnVeA3yqgac='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'8YJ1K8QWj4qZktBUwnVeA3yqgac='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xF28C84C4887C43fE22289cAd7D12Cd590ff7796a
(node:15414) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 19
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xecdeaca865a95d3e0293414a25daae6db9893b3acfdbe27a8d5999c53ae45a17",
  "blockHash": "0x35f3fc15bc019949437e2e4ef3fbaf0244e84b3c08c6dee1b60e5c6f84a422ea",
  "blockNumber": 112,
  "address": "0xF28C84C4887C43fE22289cAd7D12Cd590ff7796a",
  "type": "mined",
  "id": "log_4addb435",
  "returnValues": {
    "0": "0x093667b0cb6eac4524b82fcf8e3697b22b9b4d99abc0fa3e051d319547efc1b7",
    "1": "0x6690F2fd0A6365f602a1944057950727654B6DE7",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "19",
    "5": "1000000",
    "6": "1",
    "id": "0x093667b0cb6eac4524b82fcf8e3697b22b9b4d99abc0fa3e051d319547efc1b7",
    "recipient": "0x6690F2fd0A6365f602a1944057950727654B6DE7",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "19",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x093667b0cb6eac4524b82fcf8e3697b22b9b4d99abc0fa3e051d319547efc1b70000000000000000000000006690f2fd0a6365f602a1944057950727654b6de700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 19;
Funds: 1000000;
PricePerMB: 1;

New price is: 52631
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer ca 5f 02 a6>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer ca 5f 02 a6>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'wPAxde01SOx3qiRbCBZQsQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'j7sQomYd+uMX0izEERAJHtT8/OU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'j7sQomYd+uMX0izEERAJHtT8/OU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x1e8832c9bD4fE04056B044ae0d1D0a5169F6d1a8
(node:16205) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 183
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x5ddac7e26442df7e168ea05e442a8ab3cecdb42ff319b1aa01da5484fa9a55e2",
  "blockHash": "0x3453cc77cc9b3e0e9d9f406343c2f16b11ce6092465178dcfea746d50f1f9c41",
  "blockNumber": 129,
  "address": "0x1e8832c9bD4fE04056B044ae0d1D0a5169F6d1a8",
  "type": "mined",
  "id": "log_c94174b4",
  "returnValues": {
    "0": "0x1ab8a61ce91bef424e6c068cb62e0e2c66567bc98834d68542dd0190c57c454a",
    "1": "0x0d09057Ed645B5d61e3B719C2a8F37A3F923cb7F",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "183",
    "5": "1000000",
    "6": "1",
    "id": "0x1ab8a61ce91bef424e6c068cb62e0e2c66567bc98834d68542dd0190c57c454a",
    "recipient": "0x0d09057Ed645B5d61e3B719C2a8F37A3F923cb7F",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "183",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x1ab8a61ce91bef424e6c068cb62e0e2c66567bc98834d68542dd0190c57c454a0000000000000000000000000d09057ed645b5d61e3b719c2a8f37a3f923cb7f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb00000000000000000000000000000000000000000000000000000000000000b700000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 183;
Funds: 1000000;
PricePerMB: 1;

New price is: 5464
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 23 4e 2e 28>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 23 4e 2e 28>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'hNn1q4bwOTB0jfh8Rblmeg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'UD5S0dQAGW/3AiqOwzb/UA1EubE='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'UD5S0dQAGW/3AiqOwzb/UA1EubE='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x09a21D7F8CBbB10C70bb5CFD9D80532E2A98a1B0
(node:16373) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 71
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x17b177fc51c27659c066161634e7bc9609d5cdcabe4f1bb83d94afe6a6753a31",
  "blockHash": "0x56a021f881cf7e0a622ca44c5c6cf68eb2c2111665b6699f4d7131f2c29c3558",
  "blockNumber": 146,
  "address": "0x09a21D7F8CBbB10C70bb5CFD9D80532E2A98a1B0",
  "type": "mined",
  "id": "log_f30e52aa",
  "returnValues": {
    "0": "0xf7689c3d5e59546864cde61547602e9bf3b0a705b84ff095d9df54793e47cc1a",
    "1": "0x7891cF1d8a082931FcC40866E36e487AA32540dc",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "71",
    "5": "1000000",
    "6": "1",
    "id": "0xf7689c3d5e59546864cde61547602e9bf3b0a705b84ff095d9df54793e47cc1a",
    "recipient": "0x7891cF1d8a082931FcC40866E36e487AA32540dc",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "71",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xf7689c3d5e59546864cde61547602e9bf3b0a705b84ff095d9df54793e47cc1a0000000000000000000000007891cf1d8a082931fcc40866e36e487aa32540dc00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000004700000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 71;
Funds: 1000000;
PricePerMB: 1;

New price is: 14084
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 80 ec 25 0c>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 80 ec 25 0c>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'sG51dBuWBETVR+c0OB8Usw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'qCGO2BnUgvJGmq1jUbbhmASASrw='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'qCGO2BnUgvJGmq1jUbbhmASASrw='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60
(node:16896) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 44
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x19900f9345110371f6d91ac10cf7a7922683e812db09fedb68c981486681b518",
  "blockHash": "0x51ce7e898ddaa9bcb36f9c0239ee1e21585cb6b6efc5da633fcea1d778c3a1bc",
  "blockNumber": 163,
  "address": "0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60",
  "type": "mined",
  "id": "log_618fdc1a",
  "returnValues": {
    "0": "0x8b8c381bf08b67e053c870a167e65fdfde1350f87419c77f4c7046ef54096de7",
    "1": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "44",
    "5": "1000000",
    "6": "1",
    "id": "0x8b8c381bf08b67e053c870a167e65fdfde1350f87419c77f4c7046ef54096de7",
    "recipient": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "44",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x8b8c381bf08b67e053c870a167e65fdfde1350f87419c77f4c7046ef54096de70000000000000000000000005764060566d4583cd3d3977408da56d3c1b1187d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 44;
Funds: 1000000;
PricePerMB: 1;

New price is: 22727
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 44
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x521636c2b68db7fa3f2a40cdf4f8319b404ca36e36ef2220aec50793ae908ad5",
  "blockHash": "0xfae56172b148eabc313b698c258067d2b45dfdb1822f429ef9285f5407cd20c0",
  "blockNumber": 167,
  "address": "0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60",
  "type": "mined",
  "id": "log_ab215ecd",
  "returnValues": {
    "0": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "1": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999988",
    "5": "999956",
    "6": "999988",
    "id": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "recipient": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999988",
    "funds": "999956",
    "pricePerMB": "999988"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad0000000000000000000000005764060566d4583cd3d3977408da56d3c1b1187d00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f423400000000000000000000000000000000000000000000000000000000000f421400000000000000000000000000000000000000000000000000000000000f4234000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999988;
Funds: 999956;
Total owed: 999988;

Proportional: 999956;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x521636c2b68db7fa3f2a40cdf4f8319b404ca36e36ef2220aec50793ae908ad5",
  "blockHash": "0xfae56172b148eabc313b698c258067d2b45dfdb1822f429ef9285f5407cd20c0",
  "blockNumber": 167,
  "address": "0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60",
  "type": "mined",
  "id": "log_68a2aa4f",
  "returnValues": {
    "0": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "1": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "999988",
    "5": "999956",
    "6": "22727",
    "id": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "recipient": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "999988",
    "funds": "999956",
    "pricePerMB": "22727"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad0000000000000000000000005764060566d4583cd3d3977408da56d3c1b1187d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb00000000000000000000000000000000000000000000000000000000000f423400000000000000000000000000000000000000000000000000000000000f421400000000000000000000000000000000000000000000000000000000000058c70000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999988;
Funds: 999956;
PricePerMB: 22727;

New price is: 22726
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 29 aa c2 3a>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 29 aa c2 3a>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'mCBYoZBoZ9ZzUo0Rw+3RMA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'QDP9MmJoAs707y/7xU44WSVrKFc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'QDP9MmJoAs707y/7xU44WSVrKFc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xA1123719F6F1269255593Efe02e555AB98575A73
(node:17065) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 27
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x575279f631e8fe33d4e8d0ea7adddf8a8bef41c5a0a667d3f0c744de70993403",
  "blockHash": "0x534866712a3a970f22fb38d44ac9d090fd1fc2e443d4c051c584205bfb8bf2e1",
  "blockNumber": 185,
  "address": "0xA1123719F6F1269255593Efe02e555AB98575A73",
  "type": "mined",
  "id": "log_faaf2313",
  "returnValues": {
    "0": "0x880d9acb779dff54fadecd3f1be93d9806ba1a1b86c07b8cffdfc394d7932454",
    "1": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "27",
    "5": "1000000",
    "6": "1",
    "id": "0x880d9acb779dff54fadecd3f1be93d9806ba1a1b86c07b8cffdfc394d7932454",
    "recipient": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "27",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x880d9acb779dff54fadecd3f1be93d9806ba1a1b86c07b8cffdfc394d793245400000000000000000000000057dacb80f523be1a176f200e773b2b707ac7872f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 27;
Funds: 1000000;
PricePerMB: 1;

New price is: 37037
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 39
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x41e6b3343faa5cc771393a0952d3c9fd69d02cdf57b7fa4e726f2a26cf048cbd",
  "blockHash": "0xc9830c25dfa9ed4f0eab5ee22d6c14bec014e374370ae2e651d276b2f93867ee",
  "blockNumber": 189,
  "address": "0xA1123719F6F1269255593Efe02e555AB98575A73",
  "type": "mined",
  "id": "log_9f56cb70",
  "returnValues": {
    "0": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "1": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "1444443",
    "5": "999973",
    "6": "1444443",
    "id": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "recipient": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "1444443",
    "funds": "999973",
    "pricePerMB": "1444443"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee29800000000000000000000000057dacb80f523be1a176f200e773b2b707ac7872f00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b00000000000000000000000000000000000000000000000000000000000160a5b00000000000000000000000000000000000000000000000000000000000f42250000000000000000000000000000000000000000000000000000000000160a5b000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 1444443;
Funds: 999973;
Total owed: 1444443;

Proportional: 999973;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x41e6b3343faa5cc771393a0952d3c9fd69d02cdf57b7fa4e726f2a26cf048cbd",
  "blockHash": "0xc9830c25dfa9ed4f0eab5ee22d6c14bec014e374370ae2e651d276b2f93867ee",
  "blockNumber": 189,
  "address": "0xA1123719F6F1269255593Efe02e555AB98575A73",
  "type": "mined",
  "id": "log_a8ca69e5",
  "returnValues": {
    "0": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "1": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "1444443",
    "5": "999973",
    "6": "37037",
    "id": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "recipient": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "1444443",
    "funds": "999973",
    "pricePerMB": "37037"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee29800000000000000000000000057dacb80f523be1a176f200e773b2b707ac7872f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb0000000000000000000000000000000000000000000000000000000000160a5b00000000000000000000000000000000000000000000000000000000000f422500000000000000000000000000000000000000000000000000000000000090ad0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 1444443;
Funds: 999973;
PricePerMB: 37037;

New price is: 25640
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 30 8c df 11>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 30 8c df 11>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'lxBA8E5MNxWxVjEHGaKeTQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'C5NOTggVGDqqw+GZQgiyvYF3xKU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'C5NOTggVGDqqw+GZQgiyvYF3xKU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x11650569b457924a5E214c225CD8C0C3fF27aD54
(node:17185) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 39
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xbfa4105ea87721fbde501b2f31942713d957bb8539f8170bfb991ea169abb563",
  "blockHash": "0xcda1c44a6aab21774ea16b69883deff02ba1c54e52e108db9a98eaa580fb1940",
  "blockNumber": 207,
  "address": "0x11650569b457924a5E214c225CD8C0C3fF27aD54",
  "type": "mined",
  "id": "log_cb8d0aa8",
  "returnValues": {
    "0": "0x54176dfec8dc176d3f85e9324bbd482f77762d691ee2121d162617aee2554e8f",
    "1": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "39",
    "5": "1000000",
    "6": "1",
    "id": "0x54176dfec8dc176d3f85e9324bbd482f77762d691ee2121d162617aee2554e8f",
    "recipient": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "39",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x54176dfec8dc176d3f85e9324bbd482f77762d691ee2121d162617aee2554e8f000000000000000000000000c27a80b34543df853c3f44ebfcb6bea135a5d47c00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002700000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 39;
Funds: 1000000;
PricePerMB: 1;

New price is: 25641
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 39
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0xc9a8ed5d5232e610005298b9117148e4dbe39852c2c5d99f947fa86946f47a0d",
  "blockHash": "0x885fee97d20b1923ee2bcff77375a7f73744005466c78078472856069ded0c21",
  "blockNumber": 211,
  "address": "0x11650569b457924a5E214c225CD8C0C3fF27aD54",
  "type": "mined",
  "id": "log_74a0d481",
  "returnValues": {
    "0": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "1": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999999",
    "5": "999961",
    "6": "999999",
    "id": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "recipient": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999999",
    "funds": "999961",
    "pricePerMB": "999999"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf000000000000000000000000c27a80b34543df853c3f44ebfcb6bea135a5d47c00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f423f00000000000000000000000000000000000000000000000000000000000f421900000000000000000000000000000000000000000000000000000000000f423f000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999999;
Funds: 999961;
Total owed: 999999;

Proportional: 999961;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0xc9a8ed5d5232e610005298b9117148e4dbe39852c2c5d99f947fa86946f47a0d",
  "blockHash": "0x885fee97d20b1923ee2bcff77375a7f73744005466c78078472856069ded0c21",
  "blockNumber": 211,
  "address": "0x11650569b457924a5E214c225CD8C0C3fF27aD54",
  "type": "mined",
  "id": "log_a68e973e",
  "returnValues": {
    "0": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "1": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "999999",
    "5": "999961",
    "6": "25641",
    "id": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "recipient": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "999999",
    "funds": "999961",
    "pricePerMB": "25641"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf000000000000000000000000c27a80b34543df853c3f44ebfcb6bea135a5d47c00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb00000000000000000000000000000000000000000000000000000000000f423f00000000000000000000000000000000000000000000000000000000000f421900000000000000000000000000000000000000000000000000000000000064290000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999999;
Funds: 999961;
PricePerMB: 25641;

New price is: 25640
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 8d f3 3b 08>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 8d f3 3b 08>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'dkwXWgSTuVGPYHu2agRATg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'DUC2WVukDgUB7ytB5cxKuGN08FM='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'DUC2WVukDgUB7ytB5cxKuGN08FM='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xAB1CCBDe7B942d822d49B282d6F1841D728bE2bd
(node:18833) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 850
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x1f8d4882bd32d4e20654413c65647be50f14b644eed5ced49b565ee9f318d5a6",
  "blockHash": "0x4362b96466da0b2f327a78d549784ab49dea63b9c27e791fb531ff7491544eb2",
  "blockNumber": 229,
  "address": "0xAB1CCBDe7B942d822d49B282d6F1841D728bE2bd",
  "type": "mined",
  "id": "log_06575d29",
  "returnValues": {
    "0": "0x46fa375a245820ca96c4372841f0dd2f7012e0e5f0acda6e62b0d97a10523232",
    "1": "0xe713E641966a1A5FB0EF7D56d3302c3A9aB1e502",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "850",
    "5": "1000000",
    "6": "1",
    "id": "0x46fa375a245820ca96c4372841f0dd2f7012e0e5f0acda6e62b0d97a10523232",
    "recipient": "0xe713E641966a1A5FB0EF7D56d3302c3A9aB1e502",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "850",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x46fa375a245820ca96c4372841f0dd2f7012e0e5f0acda6e62b0d97a10523232000000000000000000000000e713e641966a1a5fb0ef7d56d3302c3a9ab1e50200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000035200000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 850;
Funds: 1000000;
PricePerMB: 1;

New price is: 1176
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 74 cd 57 ba>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 74 cd 57 ba>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'u3vIqBrKt+YWhGnHMlJ/FA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'//6nFdyfotWRzNtxmQSALga/9Bo='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'//6nFdyfotWRzNtxmQSALga/9Bo='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x5D366296d1D8857fD91A5B5729b0df0a5698EC98
(node:19040) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 46
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x827f8fd6164e86074a1f3d441e3f1e922b0fd95c8b5c350fb2c91adc5e281f77",
  "blockHash": "0x89d7e012f199f44531828649b8eee6f73b2de1c22d62db678c9dab2bd80480f8",
  "blockNumber": 246,
  "address": "0x5D366296d1D8857fD91A5B5729b0df0a5698EC98",
  "type": "mined",
  "id": "log_b441cc20",
  "returnValues": {
    "0": "0xde198fab6e10fb6899edabc6aa4029e0779ff471595412e5d4067a8dc90dce1f",
    "1": "0x8e60d9859531Af616c7746bB48a4b4fe0dbF2F53",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "46",
    "5": "1000000",
    "6": "1",
    "id": "0xde198fab6e10fb6899edabc6aa4029e0779ff471595412e5d4067a8dc90dce1f",
    "recipient": "0x8e60d9859531Af616c7746bB48a4b4fe0dbF2F53",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "46",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xde198fab6e10fb6899edabc6aa4029e0779ff471595412e5d4067a8dc90dce1f0000000000000000000000008e60d9859531af616c7746bb48a4b4fe0dbf2f5300000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 46;
Funds: 1000000;
PricePerMB: 1;

New price is: 21739
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer dc 62 ed b0>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer dc 62 ed b0>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'9Bw3dz6/mVZI0O8O3qG9Tw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'gVJF29SKgRdyE9/DFO+e+pJC3aU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'gVJF29SKgRdyE9/DFO+e+pJC3aU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x663e465278F003F0decBAC939Dc33d5263dD379A
(node:19172) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 41
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x7866cfb5bba16be505e0ed769c66ecbfa2f6f3b598ab7cbc819f06ef4f862631",
  "blockHash": "0xb9923235480e526920ff0bb1be46a632c56064dd4b65770d5bd4b8190fd13344",
  "blockNumber": 263,
  "address": "0x663e465278F003F0decBAC939Dc33d5263dD379A",
  "type": "mined",
  "id": "log_9e8b1b30",
  "returnValues": {
    "0": "0x5d5062ef29f19b15468d91f7ef4a258603edb13ef30bbf9b70cdc3ea81c48759",
    "1": "0xb5Af1B7F3937a76066eA4a82Bd1590144B0C136B",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "41",
    "5": "1000000",
    "6": "1",
    "id": "0x5d5062ef29f19b15468d91f7ef4a258603edb13ef30bbf9b70cdc3ea81c48759",
    "recipient": "0xb5Af1B7F3937a76066eA4a82Bd1590144B0C136B",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "41",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x5d5062ef29f19b15468d91f7ef4a258603edb13ef30bbf9b70cdc3ea81c48759000000000000000000000000b5af1b7f3937a76066ea4a82bd1590144b0c136b00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 41;
Funds: 1000000;
PricePerMB: 1;

New price is: 24390
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer df e2 0e be>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer df e2 0e be>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'lB5LEL2/wfRFIHPVwVsa3A=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'3UgHQZXxN5I/36NYh6drfnr1Y1I='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'3UgHQZXxN5I/36NYh6drfnr1Y1I='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xF880e4D231E8E5cb6a2D4D5d9BDa15B17141b1EB
>>> [object Object]
(node:19315) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
status code: 200
Traffic (MB): 45
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x949137da185e97b1f5358bf0fb3eed1723c54b1a41bcf3e8e22770350037234b",
  "blockHash": "0xd20f81a95c6c22d3702407c280da4baf793001985fedda8da8213f12517b98eb",
  "blockNumber": 280,
  "address": "0xF880e4D231E8E5cb6a2D4D5d9BDa15B17141b1EB",
  "type": "mined",
  "id": "log_708a45cd",
  "returnValues": {
    "0": "0x27d146ef156c4cb47133e229ef7c85150fce4e138ad4c385bc7f416f40870afb",
    "1": "0x3aBa70B45F2262Cc7Fd80B222d291a159d5aad50",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "45",
    "5": "1000000",
    "6": "1",
    "id": "0x27d146ef156c4cb47133e229ef7c85150fce4e138ad4c385bc7f416f40870afb",
    "recipient": "0x3aBa70B45F2262Cc7Fd80B222d291a159d5aad50",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "45",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x27d146ef156c4cb47133e229ef7c85150fce4e138ad4c385bc7f416f40870afb0000000000000000000000003aba70b45f2262cc7fd80b222d291a159d5aad5000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002d00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 45;
Funds: 1000000;
PricePerMB: 1;

New price is: 22222
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 58 76 cc 7e>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 58 76 cc 7e>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'eH+uzsFJYi934P0rcvb5jw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'QKIy2GpOXkTIjrdN4eH8yjVWqKw='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'QKIy2GpOXkTIjrdN4eH8yjVWqKw='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x4f96b2c2EDe426AD21EA6b3BFEc4B0dE56baAf96
(node:19440) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 73
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xa563d69cc0c8556948b2834c99596193a5824ab8efcb2487e82d0e7622b0e82f",
  "blockHash": "0x34abd1d73e1337e7960eb4447e030fac1641e93ac5666ea5cb774aaff63cf243",
  "blockNumber": 297,
  "address": "0x4f96b2c2EDe426AD21EA6b3BFEc4B0dE56baAf96",
  "type": "mined",
  "id": "log_9fd23797",
  "returnValues": {
    "0": "0xeac75aa6dad376750c02e271574cd4ac7fd4417b0e6c8bc9650ddae9f3efff7a",
    "1": "0xbF091d11e8F1f8398E59A233C3c0E55488D4d8e1",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "73",
    "5": "1000000",
    "6": "1",
    "id": "0xeac75aa6dad376750c02e271574cd4ac7fd4417b0e6c8bc9650ddae9f3efff7a",
    "recipient": "0xbF091d11e8F1f8398E59A233C3c0E55488D4d8e1",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "73",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xeac75aa6dad376750c02e271574cd4ac7fd4417b0e6c8bc9650ddae9f3efff7a000000000000000000000000bf091d11e8f1f8398e59a233c3c0e55488d4d8e100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000004900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 73;
Funds: 1000000;
PricePerMB: 1;

New price is: 13698
>>> [object Object]
EVM call result:
 [object Object]
