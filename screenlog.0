WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 1f b2 b4 70>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 1f b2 b4 70>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'L/+I3mrHV7OkhAnWuNEG4Q=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'kMmpv5PRyf1mxNNB8yCo9DGxOfU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'kMmpv5PRyf1mxNNB8yCo9DGxOfU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242
contract address: 0xc0B534e3Ec66D363B064E1Cbf9c72Dda6bB9755C
starting event monitoring on contract: 0xc0B534e3Ec66D363B064E1Cbf9c72Dda6bB9755C
(node:26430) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 15 c0 31 cc>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 15 c0 31 cc>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'47Wubm5Ldgk8YUy+YFqpmQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'A+iZGgYRGmcmkf8Q1FtiGeO1mdE='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'A+iZGgYRGmcmkf8Q1FtiGeO1mdE='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242
contract address: 0xc0B534e3Ec66D363B064E1Cbf9c72Dda6bB9755C
starting event monitoring on contract: 0x970e9Eb0C63f6DEc756d60cB55047FE77a518807
(node:26671) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 106
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x8ca80f7ee86f0264e12256a22a2514bc759a9e79ebecd0567f822e6f4c1c2f52",
  "blockHash": "0xe6fd393477c74a34a790d8bfb570c5e697d6d0f752910ab80136f5e52d44960f",
  "blockNumber": 70,
  "address": "0x970e9Eb0C63f6DEc756d60cB55047FE77a518807",
  "type": "mined",
  "id": "log_67681eea",
  "returnValues": {
    "0": "0xf17ddd4120cb660f6f34c057b2a952f49d251da0c015bcb5458baba1dff2ca41",
    "1": "0xf9C59a9A2e3045BaAC3e8aAfda53e9dBbFC4a149",
    "2": "recalculate_max_price",
    "3": "0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242",
    "4": "106",
    "5": "1000000",
    "6": "1",
    "id": "0xf17ddd4120cb660f6f34c057b2a952f49d251da0c015bcb5458baba1dff2ca41",
    "recipient": "0xf9C59a9A2e3045BaAC3e8aAfda53e9dBbFC4a149",
    "queryType": "recalculate_max_price",
    "originator": "0x6Ba4ca7a92346529CD2990043F9C1B6cEc5d4242",
    "owed": "106",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xf17ddd4120cb660f6f34c057b2a952f49d251da0c015bcb5458baba1dff2ca41000000000000000000000000f9c59a9a2e3045baac3e8aafda53e9dbbfc4a14900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000006ba4ca7a92346529cd2990043f9c1b6cec5d4242000000000000000000000000000000000000000000000000000000000000006a00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 106;
Funds: 1000000;
PricePerMB: 1;

New price is: 9433
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 26 5e cc 9d>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 26 5e cc 9d>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'R7xvxayMPpFF1tJHJROabw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Uxz0qn0IFtHHP5OXN3Qe0Jp1wOc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Uxz0qn0IFtHHP5OXN3Qe0Jp1wOc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x9fD185A9b0d08588B3315D968Ee469afBe22D54C
contract address: 0xF4e0134993979AE900CFcdDC6F9Bd92BaE863905
starting event monitoring on contract: 0x9722b4Df5944bCBFd1F6aeDb60eb4d789986A0C6
(node:27455) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 24
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xd592858158ce4473bf6645ebf648d5b34c35fd1d9f6632b8e43594497ae652d4",
  "blockHash": "0xb03e56a8507231db7a74a070733ebd5d822a35430dbe0cc4fba28983ffabfbf6",
  "blockNumber": 29,
  "address": "0x9722b4Df5944bCBFd1F6aeDb60eb4d789986A0C6",
  "type": "mined",
  "id": "log_32c24c59",
  "returnValues": {
    "0": "0xc9611b6b9e1035018f30c1d8810bc521ae4801c13bf5d233d1dc0b7b86c07c7c",
    "1": "0x54D634461833e67339a074a065B1d3114AC20940",
    "2": "recalculate_max_price",
    "3": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "4": "24",
    "5": "1000000",
    "6": "1",
    "id": "0xc9611b6b9e1035018f30c1d8810bc521ae4801c13bf5d233d1dc0b7b86c07c7c",
    "recipient": "0x54D634461833e67339a074a065B1d3114AC20940",
    "queryType": "recalculate_max_price",
    "originator": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "owed": "24",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xc9611b6b9e1035018f30c1d8810bc521ae4801c13bf5d233d1dc0b7b86c07c7c00000000000000000000000054d634461833e67339a074a065b1d3114ac2094000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000009fd185a9b0d08588b3315d968ee469afbe22d54c000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 24;
Funds: 1000000;
PricePerMB: 1;

New price is: 41666
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer fc b2 2d dd>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer fc b2 2d dd>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'x80I5TYz1AsS03x/w0olrg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'9UatjhKSlUdtmkI2MnQIRDN8rLU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'9UatjhKSlUdtmkI2MnQIRDN8rLU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x9fD185A9b0d08588B3315D968Ee469afBe22D54C
contract address: 0xF4e0134993979AE900CFcdDC6F9Bd92BaE863905
starting event monitoring on contract: 0x679fca13D3ccB827682997957968Bd7D01de3737
(node:27619) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 38
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xdff9b490d49747970cc0bc8c7909222e84b5a7589b8594d3e5beb238ddd5997b",
  "blockHash": "0x309a556ecaf38ac47fff5290c990e73eb05b2b52341d7987c25bbfcc403dc342",
  "blockNumber": 46,
  "address": "0x679fca13D3ccB827682997957968Bd7D01de3737",
  "type": "mined",
  "id": "log_64b61a42",
  "returnValues": {
    "0": "0x1cc99e689d84a3ecae812bdb0b91ea75a46a6c396372fb448884aedee5a20b86",
    "1": "0x70e0dDA30f433BB64432e9bbb10c2ebaF5E0A203",
    "2": "recalculate_max_price",
    "3": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "4": "38",
    "5": "1000000",
    "6": "1",
    "id": "0x1cc99e689d84a3ecae812bdb0b91ea75a46a6c396372fb448884aedee5a20b86",
    "recipient": "0x70e0dDA30f433BB64432e9bbb10c2ebaF5E0A203",
    "queryType": "recalculate_max_price",
    "originator": "0x9fD185A9b0d08588B3315D968Ee469afBe22D54C",
    "owed": "38",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x1cc99e689d84a3ecae812bdb0b91ea75a46a6c396372fb448884aedee5a20b8600000000000000000000000070e0dda30f433bb64432e9bbb10c2ebaf5e0a20300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000009fd185a9b0d08588b3315d968ee469afbe22d54c000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 38;
Funds: 1000000;
PricePerMB: 1;

New price is: 26315
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 2e ba 24 b2>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 2e ba 24 b2>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'loubZqPm8RUq6yXJhiPEkA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Cc2yp54oGaIcgljFAgKYhs4Kfbk='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Cc2yp54oGaIcgljFAgKYhs4Kfbk='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x23a5C670fb21ba233C11836421D91A9D4D18EAb3
contract address: 0xF4e0134993979AE900CFcdDC6F9Bd92BaE863905
starting event monitoring on contract: 0x408458896b30640cB924eD60318a3505899e9b75
(node:27830) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 63
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x3051dd0baa070c517edf8b2a738a8e70ef2a8434b7905b9708545d66e5e836c6",
  "blockHash": "0x408ac734db607fac534b09b0a1716eb5cfcb1c704f952134359d2833ac3bf25a",
  "blockNumber": 16,
  "address": "0x408458896b30640cB924eD60318a3505899e9b75",
  "type": "mined",
  "id": "log_c8fc3d5e",
  "returnValues": {
    "0": "0x2cd5a49c491486202a6ac00dabaef1090394afbf726c77ffe6d8ecede4351ccc",
    "1": "0xE1370cD529D263403BAdFCaFc8CC58ba285B4179",
    "2": "recalculate_max_price",
    "3": "0x23a5C670fb21ba233C11836421D91A9D4D18EAb3",
    "4": "63",
    "5": "1000000",
    "6": "1",
    "id": "0x2cd5a49c491486202a6ac00dabaef1090394afbf726c77ffe6d8ecede4351ccc",
    "recipient": "0xE1370cD529D263403BAdFCaFc8CC58ba285B4179",
    "queryType": "recalculate_max_price",
    "originator": "0x23a5C670fb21ba233C11836421D91A9D4D18EAb3",
    "owed": "63",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x2cd5a49c491486202a6ac00dabaef1090394afbf726c77ffe6d8ecede4351ccc000000000000000000000000e1370cd529d263403badfcafc8cc58ba285b417900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000023a5c670fb21ba233c11836421d91a9d4d18eab3000000000000000000000000000000000000000000000000000000000000003f00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 63;
Funds: 1000000;
PricePerMB: 1;

New price is: 15873
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer f7 16 d0 68>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer f7 16 d0 68>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'U8ERgiRBqEA6OYTQMkiGjw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'8dX2dNgVIk1PYsrqTKW/Jw+Hnn0='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'8dX2dNgVIk1PYsrqTKW/Jw+Hnn0='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xF4ef977e3Dc3582E2e4147ED96B3A1704391E0c6
(node:14215) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer d6 34 06 24>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer d6 34 06 24>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'GF/9mquiR5oB57sxJbQo6w=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Q5Z9Eaq6cimhImjwsNaHyCngLok='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Q5Z9Eaq6cimhImjwsNaHyCngLok='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x056e92016b77FFEFA35Ce57e0e6EC719dd9C0680
(node:14363) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 105
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xfdef7dcb7057be7c83116fa7aa23f9f130cce6d31d14774b8741b7d63cde9fc5",
  "blockHash": "0xf9903656682f61f3ef701a0f8f0a6c7515a2559eb5bedf78a42faa8f5d6242f1",
  "blockNumber": 59,
  "address": "0x056e92016b77FFEFA35Ce57e0e6EC719dd9C0680",
  "type": "mined",
  "id": "log_13ff4e1e",
  "returnValues": {
    "0": "0xe76e28c9f6e9622b283531084caa2b71b945e4689b3eeb893f1c90074d77adc4",
    "1": "0xB719542489c6fe5eC605487375d9640D3da554EA",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "105",
    "5": "1000000",
    "6": "1",
    "id": "0xe76e28c9f6e9622b283531084caa2b71b945e4689b3eeb893f1c90074d77adc4",
    "recipient": "0xB719542489c6fe5eC605487375d9640D3da554EA",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "105",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xe76e28c9f6e9622b283531084caa2b71b945e4689b3eeb893f1c90074d77adc4000000000000000000000000b719542489c6fe5ec605487375d9640d3da554ea00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 105;
Funds: 1000000;
PricePerMB: 1;

New price is: 9523
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 1b df 36 c3>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 1b df 36 c3>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'C6iooJhhJQdhC1qnpqm0Nw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'ltfAvJU4nae0kSA9B4OWUS+qG3U='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'ltfAvJU4nae0kSA9B4OWUS+qG3U='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xA835dB2d786ee176D7caD71118f66ee8aFCe6523
(node:14575) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 40
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x3a3cba9670a953b76ece53a9ad735ee6dcbbdb508bf90f717d37cbc709166d9b",
  "blockHash": "0x28725ca1ec919bb434815ea5860cc8e013961058002d9cee79999859faf0541b",
  "blockNumber": 76,
  "address": "0xA835dB2d786ee176D7caD71118f66ee8aFCe6523",
  "type": "mined",
  "id": "log_b2eeb35c",
  "returnValues": {
    "0": "0x0dfa1d99dfd52a4d6fe0d15c2eae49aa3923021dfcfb05fe82cb87e67f13dfbd",
    "1": "0xC9A0d8c29E973643302B0e216a3336136c04dd6d",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "40",
    "5": "1000000",
    "6": "1",
    "id": "0x0dfa1d99dfd52a4d6fe0d15c2eae49aa3923021dfcfb05fe82cb87e67f13dfbd",
    "recipient": "0xC9A0d8c29E973643302B0e216a3336136c04dd6d",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "40",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x0dfa1d99dfd52a4d6fe0d15c2eae49aa3923021dfcfb05fe82cb87e67f13dfbd000000000000000000000000c9a0d8c29e973643302b0e216a3336136c04dd6d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 40;
Funds: 1000000;
PricePerMB: 1;

New price is: 25000
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer d6 30 ca d5>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer d6 30 ca d5>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'oTXHy/DkfzqSgTHT/HQlag=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'v2hYf5sgSIeHBfCzLg2ts7xUYWc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'v2hYf5sgSIeHBfCzLg2ts7xUYWc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x4ebfAe10f8cfa175664a2986128170482Ee6Ac6a
(node:14703) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 83
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x895c35937d29f139ddf36764d400cfc88a75ab31d1627c2c0a3c0e501c9394b3",
  "blockHash": "0x34435f8b87407e4bb196cf560b1811eb55c47e7fd04ea97c30a3a4c293906f94",
  "blockNumber": 93,
  "address": "0x4ebfAe10f8cfa175664a2986128170482Ee6Ac6a",
  "type": "mined",
  "id": "log_d65b974b",
  "returnValues": {
    "0": "0x04d17e3b5a38550b5e05a60153d398c785c025ad999ff2d5ccfe35d9a766e6db",
    "1": "0x72bc13aE09FF8c492dE108e4901Ab3319E3639bE",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "83",
    "5": "1000000",
    "6": "1",
    "id": "0x04d17e3b5a38550b5e05a60153d398c785c025ad999ff2d5ccfe35d9a766e6db",
    "recipient": "0x72bc13aE09FF8c492dE108e4901Ab3319E3639bE",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "83",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x04d17e3b5a38550b5e05a60153d398c785c025ad999ff2d5ccfe35d9a766e6db00000000000000000000000072bc13ae09ff8c492de108e4901ab3319e3639be00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000005300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 83;
Funds: 1000000;
PricePerMB: 1;

New price is: 12048
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 27 1e 76 3a>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 27 1e 76 3a>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'yawmSa1zSzONIdQW41nJEg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'8YJ1K8QWj4qZktBUwnVeA3yqgac='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'8YJ1K8QWj4qZktBUwnVeA3yqgac='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xF28C84C4887C43fE22289cAd7D12Cd590ff7796a
(node:15414) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 19
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xecdeaca865a95d3e0293414a25daae6db9893b3acfdbe27a8d5999c53ae45a17",
  "blockHash": "0x35f3fc15bc019949437e2e4ef3fbaf0244e84b3c08c6dee1b60e5c6f84a422ea",
  "blockNumber": 112,
  "address": "0xF28C84C4887C43fE22289cAd7D12Cd590ff7796a",
  "type": "mined",
  "id": "log_4addb435",
  "returnValues": {
    "0": "0x093667b0cb6eac4524b82fcf8e3697b22b9b4d99abc0fa3e051d319547efc1b7",
    "1": "0x6690F2fd0A6365f602a1944057950727654B6DE7",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "19",
    "5": "1000000",
    "6": "1",
    "id": "0x093667b0cb6eac4524b82fcf8e3697b22b9b4d99abc0fa3e051d319547efc1b7",
    "recipient": "0x6690F2fd0A6365f602a1944057950727654B6DE7",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "19",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x093667b0cb6eac4524b82fcf8e3697b22b9b4d99abc0fa3e051d319547efc1b70000000000000000000000006690f2fd0a6365f602a1944057950727654b6de700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 19;
Funds: 1000000;
PricePerMB: 1;

New price is: 52631
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer ca 5f 02 a6>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer ca 5f 02 a6>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'wPAxde01SOx3qiRbCBZQsQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'j7sQomYd+uMX0izEERAJHtT8/OU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'j7sQomYd+uMX0izEERAJHtT8/OU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x1e8832c9bD4fE04056B044ae0d1D0a5169F6d1a8
(node:16205) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 183
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x5ddac7e26442df7e168ea05e442a8ab3cecdb42ff319b1aa01da5484fa9a55e2",
  "blockHash": "0x3453cc77cc9b3e0e9d9f406343c2f16b11ce6092465178dcfea746d50f1f9c41",
  "blockNumber": 129,
  "address": "0x1e8832c9bD4fE04056B044ae0d1D0a5169F6d1a8",
  "type": "mined",
  "id": "log_c94174b4",
  "returnValues": {
    "0": "0x1ab8a61ce91bef424e6c068cb62e0e2c66567bc98834d68542dd0190c57c454a",
    "1": "0x0d09057Ed645B5d61e3B719C2a8F37A3F923cb7F",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "183",
    "5": "1000000",
    "6": "1",
    "id": "0x1ab8a61ce91bef424e6c068cb62e0e2c66567bc98834d68542dd0190c57c454a",
    "recipient": "0x0d09057Ed645B5d61e3B719C2a8F37A3F923cb7F",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "183",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x1ab8a61ce91bef424e6c068cb62e0e2c66567bc98834d68542dd0190c57c454a0000000000000000000000000d09057ed645b5d61e3b719c2a8f37a3f923cb7f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb00000000000000000000000000000000000000000000000000000000000000b700000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 183;
Funds: 1000000;
PricePerMB: 1;

New price is: 5464
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 23 4e 2e 28>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 23 4e 2e 28>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'hNn1q4bwOTB0jfh8Rblmeg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'UD5S0dQAGW/3AiqOwzb/UA1EubE='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'UD5S0dQAGW/3AiqOwzb/UA1EubE='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x09a21D7F8CBbB10C70bb5CFD9D80532E2A98a1B0
(node:16373) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 71
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x17b177fc51c27659c066161634e7bc9609d5cdcabe4f1bb83d94afe6a6753a31",
  "blockHash": "0x56a021f881cf7e0a622ca44c5c6cf68eb2c2111665b6699f4d7131f2c29c3558",
  "blockNumber": 146,
  "address": "0x09a21D7F8CBbB10C70bb5CFD9D80532E2A98a1B0",
  "type": "mined",
  "id": "log_f30e52aa",
  "returnValues": {
    "0": "0xf7689c3d5e59546864cde61547602e9bf3b0a705b84ff095d9df54793e47cc1a",
    "1": "0x7891cF1d8a082931FcC40866E36e487AA32540dc",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "71",
    "5": "1000000",
    "6": "1",
    "id": "0xf7689c3d5e59546864cde61547602e9bf3b0a705b84ff095d9df54793e47cc1a",
    "recipient": "0x7891cF1d8a082931FcC40866E36e487AA32540dc",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "71",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xf7689c3d5e59546864cde61547602e9bf3b0a705b84ff095d9df54793e47cc1a0000000000000000000000007891cf1d8a082931fcc40866e36e487aa32540dc00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000004700000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 71;
Funds: 1000000;
PricePerMB: 1;

New price is: 14084
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 80 ec 25 0c>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 80 ec 25 0c>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'sG51dBuWBETVR+c0OB8Usw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'qCGO2BnUgvJGmq1jUbbhmASASrw='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'qCGO2BnUgvJGmq1jUbbhmASASrw='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60
(node:16896) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 44
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x19900f9345110371f6d91ac10cf7a7922683e812db09fedb68c981486681b518",
  "blockHash": "0x51ce7e898ddaa9bcb36f9c0239ee1e21585cb6b6efc5da633fcea1d778c3a1bc",
  "blockNumber": 163,
  "address": "0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60",
  "type": "mined",
  "id": "log_618fdc1a",
  "returnValues": {
    "0": "0x8b8c381bf08b67e053c870a167e65fdfde1350f87419c77f4c7046ef54096de7",
    "1": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "44",
    "5": "1000000",
    "6": "1",
    "id": "0x8b8c381bf08b67e053c870a167e65fdfde1350f87419c77f4c7046ef54096de7",
    "recipient": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "44",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x8b8c381bf08b67e053c870a167e65fdfde1350f87419c77f4c7046ef54096de70000000000000000000000005764060566d4583cd3d3977408da56d3c1b1187d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 44;
Funds: 1000000;
PricePerMB: 1;

New price is: 22727
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 44
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x521636c2b68db7fa3f2a40cdf4f8319b404ca36e36ef2220aec50793ae908ad5",
  "blockHash": "0xfae56172b148eabc313b698c258067d2b45dfdb1822f429ef9285f5407cd20c0",
  "blockNumber": 167,
  "address": "0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60",
  "type": "mined",
  "id": "log_ab215ecd",
  "returnValues": {
    "0": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "1": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999988",
    "5": "999956",
    "6": "999988",
    "id": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "recipient": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999988",
    "funds": "999956",
    "pricePerMB": "999988"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad0000000000000000000000005764060566d4583cd3d3977408da56d3c1b1187d00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f423400000000000000000000000000000000000000000000000000000000000f421400000000000000000000000000000000000000000000000000000000000f4234000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999988;
Funds: 999956;
Total owed: 999988;

Proportional: 999956;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x521636c2b68db7fa3f2a40cdf4f8319b404ca36e36ef2220aec50793ae908ad5",
  "blockHash": "0xfae56172b148eabc313b698c258067d2b45dfdb1822f429ef9285f5407cd20c0",
  "blockNumber": 167,
  "address": "0xfaCbCc88703136dDeD0f174Eaf91C13176AaCd60",
  "type": "mined",
  "id": "log_68a2aa4f",
  "returnValues": {
    "0": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "1": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "999988",
    "5": "999956",
    "6": "22727",
    "id": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad",
    "recipient": "0x5764060566D4583cD3D3977408DA56d3C1B1187d",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "999988",
    "funds": "999956",
    "pricePerMB": "22727"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x78dca7136a84c539213bac2269f9181689eac47e3d683bd60da87266d8d145ad0000000000000000000000005764060566d4583cd3d3977408da56d3c1b1187d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb00000000000000000000000000000000000000000000000000000000000f423400000000000000000000000000000000000000000000000000000000000f421400000000000000000000000000000000000000000000000000000000000058c70000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999988;
Funds: 999956;
PricePerMB: 22727;

New price is: 22726
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 29 aa c2 3a>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 29 aa c2 3a>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'mCBYoZBoZ9ZzUo0Rw+3RMA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'QDP9MmJoAs707y/7xU44WSVrKFc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'QDP9MmJoAs707y/7xU44WSVrKFc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xA1123719F6F1269255593Efe02e555AB98575A73
(node:17065) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 27
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x575279f631e8fe33d4e8d0ea7adddf8a8bef41c5a0a667d3f0c744de70993403",
  "blockHash": "0x534866712a3a970f22fb38d44ac9d090fd1fc2e443d4c051c584205bfb8bf2e1",
  "blockNumber": 185,
  "address": "0xA1123719F6F1269255593Efe02e555AB98575A73",
  "type": "mined",
  "id": "log_faaf2313",
  "returnValues": {
    "0": "0x880d9acb779dff54fadecd3f1be93d9806ba1a1b86c07b8cffdfc394d7932454",
    "1": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "27",
    "5": "1000000",
    "6": "1",
    "id": "0x880d9acb779dff54fadecd3f1be93d9806ba1a1b86c07b8cffdfc394d7932454",
    "recipient": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "27",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x880d9acb779dff54fadecd3f1be93d9806ba1a1b86c07b8cffdfc394d793245400000000000000000000000057dacb80f523be1a176f200e773b2b707ac7872f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 27;
Funds: 1000000;
PricePerMB: 1;

New price is: 37037
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 39
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x41e6b3343faa5cc771393a0952d3c9fd69d02cdf57b7fa4e726f2a26cf048cbd",
  "blockHash": "0xc9830c25dfa9ed4f0eab5ee22d6c14bec014e374370ae2e651d276b2f93867ee",
  "blockNumber": 189,
  "address": "0xA1123719F6F1269255593Efe02e555AB98575A73",
  "type": "mined",
  "id": "log_9f56cb70",
  "returnValues": {
    "0": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "1": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "1444443",
    "5": "999973",
    "6": "1444443",
    "id": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "recipient": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "1444443",
    "funds": "999973",
    "pricePerMB": "1444443"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee29800000000000000000000000057dacb80f523be1a176f200e773b2b707ac7872f00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b00000000000000000000000000000000000000000000000000000000000160a5b00000000000000000000000000000000000000000000000000000000000f42250000000000000000000000000000000000000000000000000000000000160a5b000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 1444443;
Funds: 999973;
Total owed: 1444443;

Proportional: 999973;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x41e6b3343faa5cc771393a0952d3c9fd69d02cdf57b7fa4e726f2a26cf048cbd",
  "blockHash": "0xc9830c25dfa9ed4f0eab5ee22d6c14bec014e374370ae2e651d276b2f93867ee",
  "blockNumber": 189,
  "address": "0xA1123719F6F1269255593Efe02e555AB98575A73",
  "type": "mined",
  "id": "log_a8ca69e5",
  "returnValues": {
    "0": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "1": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "1444443",
    "5": "999973",
    "6": "37037",
    "id": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee298",
    "recipient": "0x57DACB80F523bE1a176f200E773b2B707Ac7872f",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "1444443",
    "funds": "999973",
    "pricePerMB": "37037"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x556b756b83d2b5a096d0d5110e0d807997d90841c2915118c1c6592f247ee29800000000000000000000000057dacb80f523be1a176f200e773b2b707ac7872f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb0000000000000000000000000000000000000000000000000000000000160a5b00000000000000000000000000000000000000000000000000000000000f422500000000000000000000000000000000000000000000000000000000000090ad0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 1444443;
Funds: 999973;
PricePerMB: 37037;

New price is: 25640
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 30 8c df 11>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 30 8c df 11>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'lxBA8E5MNxWxVjEHGaKeTQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'C5NOTggVGDqqw+GZQgiyvYF3xKU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'C5NOTggVGDqqw+GZQgiyvYF3xKU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x11650569b457924a5E214c225CD8C0C3fF27aD54
(node:17185) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 39
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xbfa4105ea87721fbde501b2f31942713d957bb8539f8170bfb991ea169abb563",
  "blockHash": "0xcda1c44a6aab21774ea16b69883deff02ba1c54e52e108db9a98eaa580fb1940",
  "blockNumber": 207,
  "address": "0x11650569b457924a5E214c225CD8C0C3fF27aD54",
  "type": "mined",
  "id": "log_cb8d0aa8",
  "returnValues": {
    "0": "0x54176dfec8dc176d3f85e9324bbd482f77762d691ee2121d162617aee2554e8f",
    "1": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "39",
    "5": "1000000",
    "6": "1",
    "id": "0x54176dfec8dc176d3f85e9324bbd482f77762d691ee2121d162617aee2554e8f",
    "recipient": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "39",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x54176dfec8dc176d3f85e9324bbd482f77762d691ee2121d162617aee2554e8f000000000000000000000000c27a80b34543df853c3f44ebfcb6bea135a5d47c00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002700000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 39;
Funds: 1000000;
PricePerMB: 1;

New price is: 25641
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 39
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0xc9a8ed5d5232e610005298b9117148e4dbe39852c2c5d99f947fa86946f47a0d",
  "blockHash": "0x885fee97d20b1923ee2bcff77375a7f73744005466c78078472856069ded0c21",
  "blockNumber": 211,
  "address": "0x11650569b457924a5E214c225CD8C0C3fF27aD54",
  "type": "mined",
  "id": "log_74a0d481",
  "returnValues": {
    "0": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "1": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999999",
    "5": "999961",
    "6": "999999",
    "id": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "recipient": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999999",
    "funds": "999961",
    "pricePerMB": "999999"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf000000000000000000000000c27a80b34543df853c3f44ebfcb6bea135a5d47c00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f423f00000000000000000000000000000000000000000000000000000000000f421900000000000000000000000000000000000000000000000000000000000f423f000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999999;
Funds: 999961;
Total owed: 999999;

Proportional: 999961;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0xc9a8ed5d5232e610005298b9117148e4dbe39852c2c5d99f947fa86946f47a0d",
  "blockHash": "0x885fee97d20b1923ee2bcff77375a7f73744005466c78078472856069ded0c21",
  "blockNumber": 211,
  "address": "0x11650569b457924a5E214c225CD8C0C3fF27aD54",
  "type": "mined",
  "id": "log_a68e973e",
  "returnValues": {
    "0": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "1": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "999999",
    "5": "999961",
    "6": "25641",
    "id": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf",
    "recipient": "0xc27A80B34543Df853C3F44EBFCB6bEA135a5d47C",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "999999",
    "funds": "999961",
    "pricePerMB": "25641"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x822d74377289d942ebde7f480f23ce88a2a89e4ec99933543aad527926c567cf000000000000000000000000c27a80b34543df853c3f44ebfcb6bea135a5d47c00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb00000000000000000000000000000000000000000000000000000000000f423f00000000000000000000000000000000000000000000000000000000000f421900000000000000000000000000000000000000000000000000000000000064290000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999999;
Funds: 999961;
PricePerMB: 25641;

New price is: 25640
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 8d f3 3b 08>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 8d f3 3b 08>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'dkwXWgSTuVGPYHu2agRATg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'DUC2WVukDgUB7ytB5cxKuGN08FM='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'DUC2WVukDgUB7ytB5cxKuGN08FM='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xAB1CCBDe7B942d822d49B282d6F1841D728bE2bd
(node:18833) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 850
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x1f8d4882bd32d4e20654413c65647be50f14b644eed5ced49b565ee9f318d5a6",
  "blockHash": "0x4362b96466da0b2f327a78d549784ab49dea63b9c27e791fb531ff7491544eb2",
  "blockNumber": 229,
  "address": "0xAB1CCBDe7B942d822d49B282d6F1841D728bE2bd",
  "type": "mined",
  "id": "log_06575d29",
  "returnValues": {
    "0": "0x46fa375a245820ca96c4372841f0dd2f7012e0e5f0acda6e62b0d97a10523232",
    "1": "0xe713E641966a1A5FB0EF7D56d3302c3A9aB1e502",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "850",
    "5": "1000000",
    "6": "1",
    "id": "0x46fa375a245820ca96c4372841f0dd2f7012e0e5f0acda6e62b0d97a10523232",
    "recipient": "0xe713E641966a1A5FB0EF7D56d3302c3A9aB1e502",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "850",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x46fa375a245820ca96c4372841f0dd2f7012e0e5f0acda6e62b0d97a10523232000000000000000000000000e713e641966a1a5fb0ef7d56d3302c3a9ab1e50200000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000035200000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 850;
Funds: 1000000;
PricePerMB: 1;

New price is: 1176
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 74 cd 57 ba>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 74 cd 57 ba>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'u3vIqBrKt+YWhGnHMlJ/FA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'//6nFdyfotWRzNtxmQSALga/9Bo='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'//6nFdyfotWRzNtxmQSALga/9Bo='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x5D366296d1D8857fD91A5B5729b0df0a5698EC98
(node:19040) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 46
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x827f8fd6164e86074a1f3d441e3f1e922b0fd95c8b5c350fb2c91adc5e281f77",
  "blockHash": "0x89d7e012f199f44531828649b8eee6f73b2de1c22d62db678c9dab2bd80480f8",
  "blockNumber": 246,
  "address": "0x5D366296d1D8857fD91A5B5729b0df0a5698EC98",
  "type": "mined",
  "id": "log_b441cc20",
  "returnValues": {
    "0": "0xde198fab6e10fb6899edabc6aa4029e0779ff471595412e5d4067a8dc90dce1f",
    "1": "0x8e60d9859531Af616c7746bB48a4b4fe0dbF2F53",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "46",
    "5": "1000000",
    "6": "1",
    "id": "0xde198fab6e10fb6899edabc6aa4029e0779ff471595412e5d4067a8dc90dce1f",
    "recipient": "0x8e60d9859531Af616c7746bB48a4b4fe0dbF2F53",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "46",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xde198fab6e10fb6899edabc6aa4029e0779ff471595412e5d4067a8dc90dce1f0000000000000000000000008e60d9859531af616c7746bb48a4b4fe0dbf2f5300000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 46;
Funds: 1000000;
PricePerMB: 1;

New price is: 21739
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer dc 62 ed b0>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer dc 62 ed b0>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'9Bw3dz6/mVZI0O8O3qG9Tw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'gVJF29SKgRdyE9/DFO+e+pJC3aU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'gVJF29SKgRdyE9/DFO+e+pJC3aU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x663e465278F003F0decBAC939Dc33d5263dD379A
(node:19172) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 41
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x7866cfb5bba16be505e0ed769c66ecbfa2f6f3b598ab7cbc819f06ef4f862631",
  "blockHash": "0xb9923235480e526920ff0bb1be46a632c56064dd4b65770d5bd4b8190fd13344",
  "blockNumber": 263,
  "address": "0x663e465278F003F0decBAC939Dc33d5263dD379A",
  "type": "mined",
  "id": "log_9e8b1b30",
  "returnValues": {
    "0": "0x5d5062ef29f19b15468d91f7ef4a258603edb13ef30bbf9b70cdc3ea81c48759",
    "1": "0xb5Af1B7F3937a76066eA4a82Bd1590144B0C136B",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "41",
    "5": "1000000",
    "6": "1",
    "id": "0x5d5062ef29f19b15468d91f7ef4a258603edb13ef30bbf9b70cdc3ea81c48759",
    "recipient": "0xb5Af1B7F3937a76066eA4a82Bd1590144B0C136B",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "41",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x5d5062ef29f19b15468d91f7ef4a258603edb13ef30bbf9b70cdc3ea81c48759000000000000000000000000b5af1b7f3937a76066ea4a82bd1590144b0c136b00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 41;
Funds: 1000000;
PricePerMB: 1;

New price is: 24390
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer df e2 0e be>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer df e2 0e be>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'lB5LEL2/wfRFIHPVwVsa3A=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'3UgHQZXxN5I/36NYh6drfnr1Y1I='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'3UgHQZXxN5I/36NYh6drfnr1Y1I='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0xF880e4D231E8E5cb6a2D4D5d9BDa15B17141b1EB
>>> [object Object]
(node:19315) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
status code: 200
Traffic (MB): 45
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x949137da185e97b1f5358bf0fb3eed1723c54b1a41bcf3e8e22770350037234b",
  "blockHash": "0xd20f81a95c6c22d3702407c280da4baf793001985fedda8da8213f12517b98eb",
  "blockNumber": 280,
  "address": "0xF880e4D231E8E5cb6a2D4D5d9BDa15B17141b1EB",
  "type": "mined",
  "id": "log_708a45cd",
  "returnValues": {
    "0": "0x27d146ef156c4cb47133e229ef7c85150fce4e138ad4c385bc7f416f40870afb",
    "1": "0x3aBa70B45F2262Cc7Fd80B222d291a159d5aad50",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "45",
    "5": "1000000",
    "6": "1",
    "id": "0x27d146ef156c4cb47133e229ef7c85150fce4e138ad4c385bc7f416f40870afb",
    "recipient": "0x3aBa70B45F2262Cc7Fd80B222d291a159d5aad50",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "45",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x27d146ef156c4cb47133e229ef7c85150fce4e138ad4c385bc7f416f40870afb0000000000000000000000003aba70b45f2262cc7fd80b222d291a159d5aad5000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000002d00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 45;
Funds: 1000000;
PricePerMB: 1;

New price is: 22222
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 58 76 cc 7e>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 58 76 cc 7e>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'eH+uzsFJYi934P0rcvb5jw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'QKIy2GpOXkTIjrdN4eH8yjVWqKw='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'QKIy2GpOXkTIjrdN4eH8yjVWqKw='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x4f96b2c2EDe426AD21EA6b3BFEc4B0dE56baAf96
(node:19440) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 73
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xa563d69cc0c8556948b2834c99596193a5824ab8efcb2487e82d0e7622b0e82f",
  "blockHash": "0x34abd1d73e1337e7960eb4447e030fac1641e93ac5666ea5cb774aaff63cf243",
  "blockNumber": 297,
  "address": "0x4f96b2c2EDe426AD21EA6b3BFEc4B0dE56baAf96",
  "type": "mined",
  "id": "log_9fd23797",
  "returnValues": {
    "0": "0xeac75aa6dad376750c02e271574cd4ac7fd4417b0e6c8bc9650ddae9f3efff7a",
    "1": "0xbF091d11e8F1f8398E59A233C3c0E55488D4d8e1",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "73",
    "5": "1000000",
    "6": "1",
    "id": "0xeac75aa6dad376750c02e271574cd4ac7fd4417b0e6c8bc9650ddae9f3efff7a",
    "recipient": "0xbF091d11e8F1f8398E59A233C3c0E55488D4d8e1",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "73",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xeac75aa6dad376750c02e271574cd4ac7fd4417b0e6c8bc9650ddae9f3efff7a000000000000000000000000bf091d11e8f1f8398e59a233c3c0e55488d4d8e100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000004900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 73;
Funds: 1000000;
PricePerMB: 1;

New price is: 13698
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 4c 65 67 3d>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 4c 65 67 3d>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'gxJR2DqEtTF8TpOO0qErEQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'52MKHXz2sXtBmUKFtu7koR8Imfk='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'52MKHXz2sXtBmUKFtu7koR8Imfk='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x3F6dfF20aEbD17d4CF376fcb626635CF4a7E033B
(node:24019) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 82
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x57bb65d7b2d0946f2b42b1c96988f3f960a66697135b9eca496d1a04d0daf941",
  "blockHash": "0x9bd0236ff173e79eab4d102ed5ce4751e54e9604351028503961acbfceadc8a5",
  "blockNumber": 314,
  "address": "0x3F6dfF20aEbD17d4CF376fcb626635CF4a7E033B",
  "type": "mined",
  "id": "log_032ec570",
  "returnValues": {
    "0": "0xab0eba5383389e459261b042bdb1a09cb5a85c9746c105f5875d1b500a909589",
    "1": "0xBFE54cD038Cbc3FB30016e5259c28dE68316bf1E",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "82",
    "5": "1000000",
    "6": "1",
    "id": "0xab0eba5383389e459261b042bdb1a09cb5a85c9746c105f5875d1b500a909589",
    "recipient": "0xBFE54cD038Cbc3FB30016e5259c28dE68316bf1E",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "82",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xab0eba5383389e459261b042bdb1a09cb5a85c9746c105f5875d1b500a909589000000000000000000000000bfe54cd038cbc3fb30016e5259c28de68316bf1e00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 82;
Funds: 1000000;
PricePerMB: 1;

New price is: 12195
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer f9 8f 98 e6>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer f9 8f 98 e6>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'PjVGGBZbaPzInJ0eR35ryw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'AjuMNmCkz9mnFuqNLnKelklApS4='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'AjuMNmCkz9mnFuqNLnKelklApS4='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB
contract address: 0xc7c94744ad47175BE48598F00260621b55508F18
starting event monitoring on contract: 0x8F4d61dC753214bc44E51FE0002E62cC8d40Eb55
(node:24135) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 50
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x51fb0e4c795add0a5d257ff06bede656ae4531e5aadd3ca4ce4d44362db5cc25",
  "blockHash": "0x6a2117fcdd27b0a426406333f26d66d3c00472e8b65e2169b7292b87f42b509d",
  "blockNumber": 331,
  "address": "0x8F4d61dC753214bc44E51FE0002E62cC8d40Eb55",
  "type": "mined",
  "id": "log_27d79491",
  "returnValues": {
    "0": "0xb15a38337d827b665e47105a2bd44fa3b614951974d113c2792129c2fcebffae",
    "1": "0x26fd230A2f8b8767d5C2954E1eDfCEcF0b0Ea6Ba",
    "2": "recalculate_max_price",
    "3": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "4": "50",
    "5": "1000000",
    "6": "1",
    "id": "0xb15a38337d827b665e47105a2bd44fa3b614951974d113c2792129c2fcebffae",
    "recipient": "0x26fd230A2f8b8767d5C2954E1eDfCEcF0b0Ea6Ba",
    "queryType": "recalculate_max_price",
    "originator": "0x60F86e5FEedE9ebA0939268b5FCF670499BdF8eB",
    "owed": "50",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xb15a38337d827b665e47105a2bd44fa3b614951974d113c2792129c2fcebffae00000000000000000000000026fd230a2f8b8767d5c2954e1edfcecf0b0ea6ba00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000060f86e5feede9eba0939268b5fcf670499bdf8eb000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50;
Funds: 1000000;
PricePerMB: 1;

New price is: 20000
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer d1 53 59 16>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer d1 53 59 16>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'9uZH2aju8L0gSxEKdzOAzA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'FtFQZj9Q6NvfOS4zyqGknRrQA4I='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'FtFQZj9Q6NvfOS4zyqGknRrQA4I='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0xfA0Cf67F5905340ea106E592BE36c3b9dBe9A6d4
(node:25693) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 111
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x56643c314eaf252dcc7ef59e85fdfdba72b8c6289bbc9433053b4068891c0634",
  "blockHash": "0x6bf91c9ea581f60def5edb8ad02de8da2b4ef09d818dc3bf5e2babb02e42b7bc",
  "blockNumber": 29,
  "address": "0xfA0Cf67F5905340ea106E592BE36c3b9dBe9A6d4",
  "type": "mined",
  "id": "log_01b11a01",
  "returnValues": {
    "0": "0x967fd3edf2be6f015b7163da1f314cb1623bee11af8ffb89fca6e43503c66cb3",
    "1": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "111",
    "5": "1000000",
    "6": "1",
    "id": "0x967fd3edf2be6f015b7163da1f314cb1623bee11af8ffb89fca6e43503c66cb3",
    "recipient": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "111",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x967fd3edf2be6f015b7163da1f314cb1623bee11af8ffb89fca6e43503c66cb30000000000000000000000002f80371118e9df5c7dcb8343ce55396dfccf29e200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000006f00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 111;
Funds: 1000000;
PricePerMB: 1;

New price is: 9009
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 95
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x567767ac58a6564197c6058a9bbf47b38e87cb04fce81fa38b544f748590675f",
  "blockHash": "0xf9cb69d4d5b7c7e9dd3c0f2b5a76d1d1ca226ee51a3fda8d59d2db575e7e7b16",
  "blockNumber": 33,
  "address": "0xfA0Cf67F5905340ea106E592BE36c3b9dBe9A6d4",
  "type": "mined",
  "id": "log_a0a0a36a",
  "returnValues": {
    "0": "0x58f00aef3c873fde5f7dc733576fce437b34ad1d851479ac1d5c5347ebfd4892",
    "1": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "855855",
    "5": "999889",
    "6": "9009",
    "id": "0x58f00aef3c873fde5f7dc733576fce437b34ad1d851479ac1d5c5347ebfd4892",
    "recipient": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "855855",
    "funds": "999889",
    "pricePerMB": "9009"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x58f00aef3c873fde5f7dc733576fce437b34ad1d851479ac1d5c5347ebfd48920000000000000000000000002f80371118e9df5c7dcb8343ce55396dfccf29e200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000d0f2f00000000000000000000000000000000000000000000000000000000000f41d100000000000000000000000000000000000000000000000000000000000023310000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 855855;
Funds: 999889;
PricePerMB: 9009;

New price is: 10525
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 95
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0xe4b48bdcb177c372a257557e9ab8cf2e8919a886319430a28f03691ba35c7334",
  "blockHash": "0xd2beaa5cf682f08af637203045f385bc49edcd7de45f60f876c09373e6347822",
  "blockNumber": 37,
  "address": "0xfA0Cf67F5905340ea106E592BE36c3b9dBe9A6d4",
  "type": "mined",
  "id": "log_5f61e163",
  "returnValues": {
    "0": "0xaa88d5d891d80cc03a1aa0da4d371f9827b8431a4eec18761aa1276e2ef6c350",
    "1": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999875",
    "5": "144034",
    "6": "999875",
    "id": "0xaa88d5d891d80cc03a1aa0da4d371f9827b8431a4eec18761aa1276e2ef6c350",
    "recipient": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999875",
    "funds": "144034",
    "pricePerMB": "999875"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xaa88d5d891d80cc03a1aa0da4d371f9827b8431a4eec18761aa1276e2ef6c3500000000000000000000000002f80371118e9df5c7dcb8343ce55396dfccf29e200000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f41c300000000000000000000000000000000000000000000000000000000000232a200000000000000000000000000000000000000000000000000000000000f41c3000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999875;
Funds: 144034;
Total owed: 999875;

Proportional: 144034;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0xe4b48bdcb177c372a257557e9ab8cf2e8919a886319430a28f03691ba35c7334",
  "blockHash": "0xd2beaa5cf682f08af637203045f385bc49edcd7de45f60f876c09373e6347822",
  "blockNumber": 37,
  "address": "0xfA0Cf67F5905340ea106E592BE36c3b9dBe9A6d4",
  "type": "mined",
  "id": "log_c5b57a3b",
  "returnValues": {
    "0": "0xaa88d5d891d80cc03a1aa0da4d371f9827b8431a4eec18761aa1276e2ef6c350",
    "1": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "999875",
    "5": "144034",
    "6": "10525",
    "id": "0xaa88d5d891d80cc03a1aa0da4d371f9827b8431a4eec18761aa1276e2ef6c350",
    "recipient": "0x2f80371118E9dF5c7dCb8343cE55396DfcCf29E2",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "999875",
    "funds": "144034",
    "pricePerMB": "10525"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xaa88d5d891d80cc03a1aa0da4d371f9827b8431a4eec18761aa1276e2ef6c3500000000000000000000000002f80371118e9df5c7dcb8343ce55396dfccf29e200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000f41c300000000000000000000000000000000000000000000000000000000000232a2000000000000000000000000000000000000000000000000000000000000291d0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999875;
Funds: 144034;
PricePerMB: 10525;

New price is: 1516
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 42 49 c6 f1>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 42 49 c6 f1>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'BWHTuddUcNwvXd+3MItQKw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'+R6nDgl/WXG21i3MO8p3nA9G+Cc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'+R6nDgl/WXG21i3MO8p3nA9G+Cc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0xD312F38aa8D89cF01cAAE429C1c06BdE3c9cF2E8
(node:26193) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 51
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x542433588a5cb3aee647b605e05ead24708d44d12d4460dc96cf561dd695154f",
  "blockHash": "0x73cf5d396d0d883e9f47fbd9a4ae3439a6040afe079a87e2d47c09bc2ebf7085",
  "blockNumber": 55,
  "address": "0xD312F38aa8D89cF01cAAE429C1c06BdE3c9cF2E8",
  "type": "mined",
  "id": "log_7cda5353",
  "returnValues": {
    "0": "0x3793e842f7502af79b12f7824d3a31c3e410629f56662a8e8b09b2edcad78783",
    "1": "0xB08a7CAbE3afB50EcE85D11a71A0E3D56020dced",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "51",
    "5": "1000000",
    "6": "1",
    "id": "0x3793e842f7502af79b12f7824d3a31c3e410629f56662a8e8b09b2edcad78783",
    "recipient": "0xB08a7CAbE3afB50EcE85D11a71A0E3D56020dced",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "51",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x3793e842f7502af79b12f7824d3a31c3e410629f56662a8e8b09b2edcad78783000000000000000000000000b08a7cabe3afb50ece85d11a71a0e3d56020dced00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000003300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 51;
Funds: 1000000;
PricePerMB: 1;

New price is: 19607
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 88 23 5c 66>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 88 23 5c 66>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'rB7CJ0huYZZaWVtZtjnquQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'3mKZ9dpFzT41PCldic65aW4DXzw='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'3mKZ9dpFzT41PCldic65aW4DXzw='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0xC2DbFEA310Ece356A23f6fB8a870C089aC19Ed74
(node:26351) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 105
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xbd75d5692c166291f40dfafb9b423571adfb3252aad7ae9e8ecb6459a5078bfe",
  "blockHash": "0x8f744e6784bdb1ee5217489c596c98766b542e5d213a8becd32b4698f47e341c",
  "blockNumber": 72,
  "address": "0xC2DbFEA310Ece356A23f6fB8a870C089aC19Ed74",
  "type": "mined",
  "id": "log_82ba1e39",
  "returnValues": {
    "0": "0x9b5d5a7bdafa91c619050ded86c03f1034c2c601d9f2212411b3636f3d53f94c",
    "1": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "105",
    "5": "1000000",
    "6": "1",
    "id": "0x9b5d5a7bdafa91c619050ded86c03f1034c2c601d9f2212411b3636f3d53f94c",
    "recipient": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "105",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x9b5d5a7bdafa91c619050ded86c03f1034c2c601d9f2212411b3636f3d53f94c0000000000000000000000003ec16f3e400ff970cb0316b2d8c461b2f3adeaee00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000006900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 105;
Funds: 1000000;
PricePerMB: 1;

New price is: 9523
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 102
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xce47ae13a53845044c1a8ba6dee1617af9f42d3e821b8793930c3d146c21f2f9",
  "blockHash": "0xeb29ef441b749b8e16808a4ab0bfd6be9df2ef9db3d58c0f3aeaeb20a5307021",
  "blockNumber": 76,
  "address": "0xC2DbFEA310Ece356A23f6fB8a870C089aC19Ed74",
  "type": "mined",
  "id": "log_58b80f9e",
  "returnValues": {
    "0": "0xc86c17ed00c73d0ce364a5427702533a4a26362b0e048a36e124ed84ba0a8170",
    "1": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "971346",
    "5": "999895",
    "6": "9523",
    "id": "0xc86c17ed00c73d0ce364a5427702533a4a26362b0e048a36e124ed84ba0a8170",
    "recipient": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "971346",
    "funds": "999895",
    "pricePerMB": "9523"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xc86c17ed00c73d0ce364a5427702533a4a26362b0e048a36e124ed84ba0a81700000000000000000000000003ec16f3e400ff970cb0316b2d8c461b2f3adeaee00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000ed25200000000000000000000000000000000000000000000000000000000000f41d700000000000000000000000000000000000000000000000000000000000025330000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 971346;
Funds: 999895;
PricePerMB: 9523;

New price is: 9523
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 102
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x835bcc4b38a7316c49386ea04a6b02406d0d80a7e0285a3ff00abfb14771e9dc",
  "blockHash": "0xe90e148620a45e2fd160edbbcc09b1629b73090b20ae2eb7e9fa2e921517d45d",
  "blockNumber": 80,
  "address": "0xC2DbFEA310Ece356A23f6fB8a870C089aC19Ed74",
  "type": "mined",
  "id": "log_8043efb5",
  "returnValues": {
    "0": "0x7094fa087c90753c5dbc61a4ac3077afc223c2f5cdb8bee114526d8da9c812f4",
    "1": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "971346",
    "5": "28549",
    "6": "971346",
    "id": "0x7094fa087c90753c5dbc61a4ac3077afc223c2f5cdb8bee114526d8da9c812f4",
    "recipient": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "971346",
    "funds": "28549",
    "pricePerMB": "971346"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x7094fa087c90753c5dbc61a4ac3077afc223c2f5cdb8bee114526d8da9c812f40000000000000000000000003ec16f3e400ff970cb0316b2d8c461b2f3adeaee00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000ed2520000000000000000000000000000000000000000000000000000000000006f8500000000000000000000000000000000000000000000000000000000000ed252000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 971346;
Funds: 28549;
Total owed: 971346;

Proportional: 28549;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x835bcc4b38a7316c49386ea04a6b02406d0d80a7e0285a3ff00abfb14771e9dc",
  "blockHash": "0xe90e148620a45e2fd160edbbcc09b1629b73090b20ae2eb7e9fa2e921517d45d",
  "blockNumber": 80,
  "address": "0xC2DbFEA310Ece356A23f6fB8a870C089aC19Ed74",
  "type": "mined",
  "id": "log_eb4d5bec",
  "returnValues": {
    "0": "0x7094fa087c90753c5dbc61a4ac3077afc223c2f5cdb8bee114526d8da9c812f4",
    "1": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "971346",
    "5": "28549",
    "6": "9523",
    "id": "0x7094fa087c90753c5dbc61a4ac3077afc223c2f5cdb8bee114526d8da9c812f4",
    "recipient": "0x3ec16F3E400Ff970cb0316b2d8C461B2F3aDEaEE",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "971346",
    "funds": "28549",
    "pricePerMB": "9523"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x7094fa087c90753c5dbc61a4ac3077afc223c2f5cdb8bee114526d8da9c812f40000000000000000000000003ec16f3e400ff970cb0316b2d8c461b2f3adeaee00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000ed2520000000000000000000000000000000000000000000000000000000000006f8500000000000000000000000000000000000000000000000000000000000025330000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 971346;
Funds: 28549;
PricePerMB: 9523;

New price is: 279
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 59 bc 35 33>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 59 bc 35 33>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'OnL7Ejh/8zvYA6FNPe/tnA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'mZmHrEnQSvjKprwfEC4j+QgWVY8='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'mZmHrEnQSvjKprwfEC4j+QgWVY8='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0xa2a87F77c48EAC187b5Ad38E75b28825866ea9f2
(node:26748) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 44
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xc14e92d02648e33ec9021beb57fce8f94e312ac5e60ffc2f39da492b662a7aa8",
  "blockHash": "0x63e9d455341ab56e6b433e5f14cd02bc28297deabd44ac54fd696d12ea5f6722",
  "blockNumber": 98,
  "address": "0xa2a87F77c48EAC187b5Ad38E75b28825866ea9f2",
  "type": "mined",
  "id": "log_e18f19b0",
  "returnValues": {
    "0": "0x48f8b0e72991f1abbcc572d70b546c15879e475ae2ad8e3a456bf8e4263d72da",
    "1": "0xAc24423c99a15Fc1e3f0aBBF34599F0E5AD6F679",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "44",
    "5": "1000000",
    "6": "1",
    "id": "0x48f8b0e72991f1abbcc572d70b546c15879e475ae2ad8e3a456bf8e4263d72da",
    "recipient": "0xAc24423c99a15Fc1e3f0aBBF34599F0E5AD6F679",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "44",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x48f8b0e72991f1abbcc572d70b546c15879e475ae2ad8e3a456bf8e4263d72da000000000000000000000000ac24423c99a15fc1e3f0abbf34599f0e5ad6f67900000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 44;
Funds: 1000000;
PricePerMB: 1;

New price is: 22727
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 44
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0xfe2678cde0c022a6706283b415dc5f0d1e257789a328c2bc328b40f9ee36ac1a",
  "blockHash": "0xfe3beef8cae84b9678b30ef462899f93ac1ab4101bfb91550b274f283de1754d",
  "blockNumber": 102,
  "address": "0xa2a87F77c48EAC187b5Ad38E75b28825866ea9f2",
  "type": "mined",
  "id": "log_1d739415",
  "returnValues": {
    "0": "0x34ad0c6c3dcff4886cc5152aed0bfe731623476011a9f40477db0b85816d1d7f",
    "1": "0xAc24423c99a15Fc1e3f0aBBF34599F0E5AD6F679",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999988",
    "5": "999956",
    "6": "999988",
    "id": "0x34ad0c6c3dcff4886cc5152aed0bfe731623476011a9f40477db0b85816d1d7f",
    "recipient": "0xAc24423c99a15Fc1e3f0aBBF34599F0E5AD6F679",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999988",
    "funds": "999956",
    "pricePerMB": "999988"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x34ad0c6c3dcff4886cc5152aed0bfe731623476011a9f40477db0b85816d1d7f000000000000000000000000ac24423c99a15fc1e3f0abbf34599f0e5ad6f67900000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f423400000000000000000000000000000000000000000000000000000000000f421400000000000000000000000000000000000000000000000000000000000f4234000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999988;
Funds: 999956;
Total owed: 999988;

Proportional: 999956;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0xfe2678cde0c022a6706283b415dc5f0d1e257789a328c2bc328b40f9ee36ac1a",
  "blockHash": "0xfe3beef8cae84b9678b30ef462899f93ac1ab4101bfb91550b274f283de1754d",
  "blockNumber": 102,
  "address": "0xa2a87F77c48EAC187b5Ad38E75b28825866ea9f2",
  "type": "mined",
  "id": "log_37eeb3dd",
  "returnValues": {
    "0": "0x34ad0c6c3dcff4886cc5152aed0bfe731623476011a9f40477db0b85816d1d7f",
    "1": "0xAc24423c99a15Fc1e3f0aBBF34599F0E5AD6F679",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "999988",
    "5": "999956",
    "6": "22727",
    "id": "0x34ad0c6c3dcff4886cc5152aed0bfe731623476011a9f40477db0b85816d1d7f",
    "recipient": "0xAc24423c99a15Fc1e3f0aBBF34599F0E5AD6F679",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "999988",
    "funds": "999956",
    "pricePerMB": "22727"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x34ad0c6c3dcff4886cc5152aed0bfe731623476011a9f40477db0b85816d1d7f000000000000000000000000ac24423c99a15fc1e3f0abbf34599f0e5ad6f67900000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000f423400000000000000000000000000000000000000000000000000000000000f421400000000000000000000000000000000000000000000000000000000000058c70000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999988;
Funds: 999956;
PricePerMB: 22727;

New price is: 22726
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 69 1c dc ba>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 69 1c dc ba>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'raD73w6lftiWdjNbDpderA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'MH7NlhMpeFMpNbz0KPmwi4/zQUk='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'MH7NlhMpeFMpNbz0KPmwi4/zQUk='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0x64cCd867607D08E5d4249f3EeF92A5a1cD81cBEc
(node:27167) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 51
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x3829d4f1d61656ffdeb92741827c1e87942d75b59ae6218049610cd35ce33950",
  "blockHash": "0x4c5d70422299abde237f65327bede07d8f4753e67c99db6bd522b587c963aece",
  "blockNumber": 120,
  "address": "0x64cCd867607D08E5d4249f3EeF92A5a1cD81cBEc",
  "type": "mined",
  "id": "log_0cd155d4",
  "returnValues": {
    "0": "0x8ea62e889c4b98e2c99569baf388a140d10f20c59d55ae3eebc052b7793fa967",
    "1": "0xc2e9200faE61f0De25A6FeBb5ec7feD770B1d5E1",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "51",
    "5": "1000000",
    "6": "1",
    "id": "0x8ea62e889c4b98e2c99569baf388a140d10f20c59d55ae3eebc052b7793fa967",
    "recipient": "0xc2e9200faE61f0De25A6FeBb5ec7feD770B1d5E1",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "51",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x8ea62e889c4b98e2c99569baf388a140d10f20c59d55ae3eebc052b7793fa967000000000000000000000000c2e9200fae61f0de25a6febb5ec7fed770b1d5e100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000003300000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 51;
Funds: 1000000;
PricePerMB: 1;

New price is: 19607
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 51
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0xd64a0937ed6260afe8c851b8534e96d7c059a54c07e53ecef6696c88571dbfab",
  "blockHash": "0x518206383589f5be6674a26a217f8cedd768def43727639b7c94db5e955d1eba",
  "blockNumber": 124,
  "address": "0x64cCd867607D08E5d4249f3EeF92A5a1cD81cBEc",
  "type": "mined",
  "id": "log_d0ec9c84",
  "returnValues": {
    "0": "0xcd30cce3023c7209a1f9758dac289d6bcd50a6d6d83a64e25a8814722a1ae27a",
    "1": "0xc2e9200faE61f0De25A6FeBb5ec7feD770B1d5E1",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999957",
    "5": "999949",
    "6": "999957",
    "id": "0xcd30cce3023c7209a1f9758dac289d6bcd50a6d6d83a64e25a8814722a1ae27a",
    "recipient": "0xc2e9200faE61f0De25A6FeBb5ec7feD770B1d5E1",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999957",
    "funds": "999949",
    "pricePerMB": "999957"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xcd30cce3023c7209a1f9758dac289d6bcd50a6d6d83a64e25a8814722a1ae27a000000000000000000000000c2e9200fae61f0de25a6febb5ec7fed770b1d5e100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f421500000000000000000000000000000000000000000000000000000000000f420d00000000000000000000000000000000000000000000000000000000000f4215000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999957;
Funds: 999949;
Total owed: 999957;

Proportional: 999949;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0xd64a0937ed6260afe8c851b8534e96d7c059a54c07e53ecef6696c88571dbfab",
  "blockHash": "0x518206383589f5be6674a26a217f8cedd768def43727639b7c94db5e955d1eba",
  "blockNumber": 124,
  "address": "0x64cCd867607D08E5d4249f3EeF92A5a1cD81cBEc",
  "type": "mined",
  "id": "log_dd79717d",
  "returnValues": {
    "0": "0xcd30cce3023c7209a1f9758dac289d6bcd50a6d6d83a64e25a8814722a1ae27a",
    "1": "0xc2e9200faE61f0De25A6FeBb5ec7feD770B1d5E1",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "999957",
    "5": "999949",
    "6": "19607",
    "id": "0xcd30cce3023c7209a1f9758dac289d6bcd50a6d6d83a64e25a8814722a1ae27a",
    "recipient": "0xc2e9200faE61f0De25A6FeBb5ec7feD770B1d5E1",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "999957",
    "funds": "999949",
    "pricePerMB": "19607"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xcd30cce3023c7209a1f9758dac289d6bcd50a6d6d83a64e25a8814722a1ae27a000000000000000000000000c2e9200fae61f0de25a6febb5ec7fed770b1d5e100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000f421500000000000000000000000000000000000000000000000000000000000f420d0000000000000000000000000000000000000000000000000000000000004c970000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999957;
Funds: 999949;
PricePerMB: 19607;

New price is: 19606
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer d7 6f 69 70>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer d7 6f 69 70>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'b3YvM2tFrtrFj32jvwylvA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Jo7Jgw6lOZQyESwyQodYhCmiAVQ='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Jo7Jgw6lOZQyESwyQodYhCmiAVQ='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0xf4976c3D4Ae2cAF352a71b7d02B65C10Bd836C9A
(node:27859) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 103
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x0c786ae53611cf58b654251f5cbd035f73955e8db0ecc587a8e4931f3635b82b",
  "blockHash": "0xbdc0534a5958e63841430d631398072c949ab3e55121d078be30ec14ae8fe117",
  "blockNumber": 142,
  "address": "0xf4976c3D4Ae2cAF352a71b7d02B65C10Bd836C9A",
  "type": "mined",
  "id": "log_7e820d33",
  "returnValues": {
    "0": "0xdfbac95fbc420b34f13dd21a73c1e381a70c54ddec9aa5cf1c49b1c01d1d35f2",
    "1": "0xDA8a2c5396944B3D296D9F8096EC7c8451c05B66",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "103",
    "5": "1000000",
    "6": "1",
    "id": "0xdfbac95fbc420b34f13dd21a73c1e381a70c54ddec9aa5cf1c49b1c01d1d35f2",
    "recipient": "0xDA8a2c5396944B3D296D9F8096EC7c8451c05B66",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "103",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xdfbac95fbc420b34f13dd21a73c1e381a70c54ddec9aa5cf1c49b1c01d1d35f2000000000000000000000000da8a2c5396944b3d296d9f8096ec7c8451c05b6600000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000006700000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 103;
Funds: 1000000;
PricePerMB: 1;

New price is: 9708
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 103
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x9389c2d6ece663bca2a0c17849eecb91358fd636bffdc4073407351cf1023141",
  "blockHash": "0x2720ac7256a1f570233aa83b1bb4d02225db04c172bf5596a7b312b3c880311d",
  "blockNumber": 146,
  "address": "0xf4976c3D4Ae2cAF352a71b7d02B65C10Bd836C9A",
  "type": "mined",
  "id": "log_3304aa31",
  "returnValues": {
    "0": "0x57b06a83873612fac4f115a9beb298da505d2e9777b1485df153f08df4562ecf",
    "1": "0xDA8a2c5396944B3D296D9F8096EC7c8451c05B66",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999924",
    "5": "999897",
    "6": "999924",
    "id": "0x57b06a83873612fac4f115a9beb298da505d2e9777b1485df153f08df4562ecf",
    "recipient": "0xDA8a2c5396944B3D296D9F8096EC7c8451c05B66",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999924",
    "funds": "999897",
    "pricePerMB": "999924"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x57b06a83873612fac4f115a9beb298da505d2e9777b1485df153f08df4562ecf000000000000000000000000da8a2c5396944b3d296d9f8096ec7c8451c05b6600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f41f400000000000000000000000000000000000000000000000000000000000f41d900000000000000000000000000000000000000000000000000000000000f41f4000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999924;
Funds: 999897;
Total owed: 999924;

Proportional: 999897;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x9389c2d6ece663bca2a0c17849eecb91358fd636bffdc4073407351cf1023141",
  "blockHash": "0x2720ac7256a1f570233aa83b1bb4d02225db04c172bf5596a7b312b3c880311d",
  "blockNumber": 146,
  "address": "0xf4976c3D4Ae2cAF352a71b7d02B65C10Bd836C9A",
  "type": "mined",
  "id": "log_f3680c8d",
  "returnValues": {
    "0": "0x57b06a83873612fac4f115a9beb298da505d2e9777b1485df153f08df4562ecf",
    "1": "0xDA8a2c5396944B3D296D9F8096EC7c8451c05B66",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "999924",
    "5": "999897",
    "6": "9708",
    "id": "0x57b06a83873612fac4f115a9beb298da505d2e9777b1485df153f08df4562ecf",
    "recipient": "0xDA8a2c5396944B3D296D9F8096EC7c8451c05B66",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "999924",
    "funds": "999897",
    "pricePerMB": "9708"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x57b06a83873612fac4f115a9beb298da505d2e9777b1485df153f08df4562ecf000000000000000000000000da8a2c5396944b3d296d9f8096ec7c8451c05b6600000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000f41f400000000000000000000000000000000000000000000000000000000000f41d900000000000000000000000000000000000000000000000000000000000025ec0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999924;
Funds: 999897;
PricePerMB: 9708;

New price is: 9707
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer a2 11 0a ef>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer a2 11 0a ef>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'Ei5GbI59+d3B4NHZjMo7ZQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'ZltpVVvM9jTvnoxfKQ+UtgextTc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'ZltpVVvM9jTvnoxfKQ+UtgextTc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0x67E1a79d625748C2ED996aD0242fCac8BE99DAc3
(node:27990) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 21
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x986aa3934c797b08dd94e31930ab38476c36102288a231284b4fa8ee5c79cee9",
  "blockHash": "0xd0665650952b83f58f3316b34f1dc2487bf7d67fe6fd543b9f2c1d481d9295cb",
  "blockNumber": 164,
  "address": "0x67E1a79d625748C2ED996aD0242fCac8BE99DAc3",
  "type": "mined",
  "id": "log_d4190cb7",
  "returnValues": {
    "0": "0x1b26612e239b1a9d587198c9410d34a11027605b6bd3b2649321c6b2eaef7a0c",
    "1": "0xfc119f210F278A19978bd2f7326b37a3eBe8F62A",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "21",
    "5": "1000000",
    "6": "1",
    "id": "0x1b26612e239b1a9d587198c9410d34a11027605b6bd3b2649321c6b2eaef7a0c",
    "recipient": "0xfc119f210F278A19978bd2f7326b37a3eBe8F62A",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "21",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x1b26612e239b1a9d587198c9410d34a11027605b6bd3b2649321c6b2eaef7a0c000000000000000000000000fc119f210f278a19978bd2f7326b37a3ebe8f62a00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000001500000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 21;
Funds: 1000000;
PricePerMB: 1;

New price is: 47619
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 21
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0xdd0a7892349d380d60f4db7c124e8878a0b80be7393480678b452286868efbb9",
  "blockHash": "0xb8922b8f99b8cb78cb55a72da68c29aff0b7fbcdb46f647f7d71f866dcadf327",
  "blockNumber": 168,
  "address": "0x67E1a79d625748C2ED996aD0242fCac8BE99DAc3",
  "type": "mined",
  "id": "log_593417bb",
  "returnValues": {
    "0": "0x31adcf7184484424a22f97cf3f1bd6691d53f8d090924dbdd871f688c124a738",
    "1": "0xfc119f210F278A19978bd2f7326b37a3eBe8F62A",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "999999",
    "5": "999979",
    "6": "999999",
    "id": "0x31adcf7184484424a22f97cf3f1bd6691d53f8d090924dbdd871f688c124a738",
    "recipient": "0xfc119f210F278A19978bd2f7326b37a3eBe8F62A",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "999999",
    "funds": "999979",
    "pricePerMB": "999999"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x31adcf7184484424a22f97cf3f1bd6691d53f8d090924dbdd871f688c124a738000000000000000000000000fc119f210f278a19978bd2f7326b37a3ebe8f62a00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f423f00000000000000000000000000000000000000000000000000000000000f422b00000000000000000000000000000000000000000000000000000000000f423f000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999999;
Funds: 999979;
Total owed: 999999;

Proportional: 999979;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0xdd0a7892349d380d60f4db7c124e8878a0b80be7393480678b452286868efbb9",
  "blockHash": "0xb8922b8f99b8cb78cb55a72da68c29aff0b7fbcdb46f647f7d71f866dcadf327",
  "blockNumber": 168,
  "address": "0x67E1a79d625748C2ED996aD0242fCac8BE99DAc3",
  "type": "mined",
  "id": "log_924b3df3",
  "returnValues": {
    "0": "0x31adcf7184484424a22f97cf3f1bd6691d53f8d090924dbdd871f688c124a738",
    "1": "0xfc119f210F278A19978bd2f7326b37a3eBe8F62A",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "999999",
    "5": "999979",
    "6": "47619",
    "id": "0x31adcf7184484424a22f97cf3f1bd6691d53f8d090924dbdd871f688c124a738",
    "recipient": "0xfc119f210F278A19978bd2f7326b37a3eBe8F62A",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "999999",
    "funds": "999979",
    "pricePerMB": "47619"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x31adcf7184484424a22f97cf3f1bd6691d53f8d090924dbdd871f688c124a738000000000000000000000000fc119f210f278a19978bd2f7326b37a3ebe8f62a00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000f423f00000000000000000000000000000000000000000000000000000000000f422b000000000000000000000000000000000000000000000000000000000000ba030000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 999999;
Funds: 999979;
PricePerMB: 47619;

New price is: 47618
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer d0 e2 41 99>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer d0 e2 41 99>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'1pIbrVy8sPgamQCUUU6eug=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'35BiCcpHkQ+yeKB9EHQmFrQMcyo='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'35BiCcpHkQ+yeKB9EHQmFrQMcyo='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8
contract address: 0xfC80AE78865e140f0c64Ef96Bdd2d0446688dF0F
starting event monitoring on contract: 0xc395Ec06D8FC90387841790350ABcb32c759d9C9
(node:28108) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
>>> [object Object]
status code: 200
Traffic (MB): 25
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x76d6d6bbdfebe1be9b60c9adfe36f4e6d994a7bcd235899d0685de6d12f14591",
  "blockHash": "0x0606c97e48fb937625fbbca8a4aebca0a0c60fb66b1e9e28397bf1386c43e081",
  "blockNumber": 186,
  "address": "0xc395Ec06D8FC90387841790350ABcb32c759d9C9",
  "type": "mined",
  "id": "log_90c17dd2",
  "returnValues": {
    "0": "0xc44db9ce67cf77f893c061c4716816baac9bed28718938829d6b96410c82c0ab",
    "1": "0x1D2B857D892848A5cbA4715cd362228807F141E6",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "25",
    "5": "1000000",
    "6": "1",
    "id": "0xc44db9ce67cf77f893c061c4716816baac9bed28718938829d6b96410c82c0ab",
    "recipient": "0x1D2B857D892848A5cbA4715cd362228807F141E6",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "25",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xc44db9ce67cf77f893c061c4716816baac9bed28718938829d6b96410c82c0ab0000000000000000000000001d2b857d892848a5cba4715cd362228807f141e600000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec8000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 25;
Funds: 1000000;
PricePerMB: 1;

New price is: 40000
>>> [object Object]
EVM call result:
 [object Object]
>>> [object Object]
status code: 200
Traffic (MB): 25
0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x8259982042e2b1fe20f614ebea2645f7289891d63991d93c72315e190d4443a6",
  "blockHash": "0x9b51ffd46a76b793f8bd30f757725fe7be294389c2030f650e759c1f2b8fdc04",
  "blockNumber": 190,
  "address": "0xc395Ec06D8FC90387841790350ABcb32c759d9C9",
  "type": "mined",
  "id": "log_1b4a15a0",
  "returnValues": {
    "0": "0x9b026a099ebda6d35cb276722448c080a5763de9d5778a2a8284afa79e772676",
    "1": "0x1D2B857D892848A5cbA4715cd362228807F141E6",
    "2": "calculate_proportional",
    "3": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "4": "1000000",
    "5": "999975",
    "6": "1000000",
    "id": "0x9b026a099ebda6d35cb276722448c080a5763de9d5778a2a8284afa79e772676",
    "recipient": "0x1D2B857D892848A5cbA4715cd362228807F141E6",
    "queryType": "calculate_proportional",
    "originator": "0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0",
    "owed": "1000000",
    "funds": "999975",
    "pricePerMB": "1000000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x9b026a099ebda6d35cb276722448c080a5763de9d5778a2a8284afa79e7726760000000000000000000000001d2b857d892848a5cba4715cd362228807f141e600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000007906a322b03e3e06a79e44982db9ca2acec1b4b000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f422700000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 1000000;
Funds: 999975;
Total owed: 1000000;

Proportional: 999975;
Provider: 0x7906a322B03E3E06A79E44982DB9Ca2AcEc1B4b0
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x8259982042e2b1fe20f614ebea2645f7289891d63991d93c72315e190d4443a6",
  "blockHash": "0x9b51ffd46a76b793f8bd30f757725fe7be294389c2030f650e759c1f2b8fdc04",
  "blockNumber": 190,
  "address": "0xc395Ec06D8FC90387841790350ABcb32c759d9C9",
  "type": "mined",
  "id": "log_0782a7a7",
  "returnValues": {
    "0": "0x9b026a099ebda6d35cb276722448c080a5763de9d5778a2a8284afa79e772676",
    "1": "0x1D2B857D892848A5cbA4715cd362228807F141E6",
    "2": "recalculate_max_price",
    "3": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "4": "1000000",
    "5": "999975",
    "6": "40000",
    "id": "0x9b026a099ebda6d35cb276722448c080a5763de9d5778a2a8284afa79e772676",
    "recipient": "0x1D2B857D892848A5cbA4715cd362228807F141E6",
    "queryType": "recalculate_max_price",
    "originator": "0xB2F2D2A5Ad79938737f530Eb44FF9b0666dd0EC8",
    "owed": "1000000",
    "funds": "999975",
    "pricePerMB": "40000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x9b026a099ebda6d35cb276722448c080a5763de9d5778a2a8284afa79e7726760000000000000000000000001d2b857d892848a5cba4715cd362228807f141e600000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000b2f2d2a5ad79938737f530eb44ff9b0666dd0ec800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f42270000000000000000000000000000000000000000000000000000000000009c400000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 1000000;
Funds: 999975;
PricePerMB: 40000;

New price is: 39999
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer e8 ae ca 03>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer e8 ae ca 03>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'870pFl3ZHPXW59p54QsxGw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'4dSRr6PUvQAf3qOanAcxv/XPZOM='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'4dSRr6PUvQAf3qOanAcxv/XPZOM='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x0BA6A5D21FBFe8845d9d193Ed2237CDB7D03D99B
Aqui llegó
>>> [object Object]
(node:23641) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 46 68 19 05>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 46 68 19 05>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m's4rylW4vAZt+JelBaOmASQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Ob8m4jyT9K1a4VPL7oVHJMT3Pmo='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Ob8m4jyT9K1a4VPL7oVHJMT3Pmo='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xbF03059e9508E722cE83Af313eBb742c3eC0642a
(node:23749) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x8f86846a555e6708fc0978a60bf3cd2ec7bbadce1f5c6a2edfeab88ace2d5147",
  "blockHash": "0xed0ef1181eaa7a82510ac839cdac14fd3f569ed795e22aba76c5f4d4bd14751b",
  "blockNumber": 69,
  "address": "0xbF03059e9508E722cE83Af313eBb742c3eC0642a",
  "type": "mined",
  "id": "log_cccd386e",
  "returnValues": {
    "0": "0x12b9d2341cad2ccfd497de67d7e61a040825b02cf07bf095a622a383ad79d013",
    "1": "0x700E87338e1CFcfEB4169194cF0267AEac170b27",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x12b9d2341cad2ccfd497de67d7e61a040825b02cf07bf095a622a383ad79d013",
    "recipient": "0x700E87338e1CFcfEB4169194cF0267AEac170b27",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x12b9d2341cad2ccfd497de67d7e61a040825b02cf07bf095a622a383ad79d013000000000000000000000000700e87338e1cfcfeb4169194cf0267aeac170b2700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer e2 53 f0 a3>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer e2 53 f0 a3>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'BFASFlQldUuYnbEj74tGfQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'P3tyY+zTbUkc1y9W1ucaCFA62bA='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'P3tyY+zTbUkc1y9W1ucaCFA62bA='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x8B9AF826a5356516CAB6400d7D1E9fB126a65b12
(node:23858) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xcfbbfadd4b01474db3737725b4358e41cb1a8170c98451ec71e4886338b0f98e",
  "blockHash": "0xbae91e66b87b2ac2cc1d5b5c0e5cbe48ff443230ecd3bc332882c4131cf4fba0",
  "blockNumber": 88,
  "address": "0x8B9AF826a5356516CAB6400d7D1E9fB126a65b12",
  "type": "mined",
  "id": "log_92d1776e",
  "returnValues": {
    "0": "0x87d742351c42f14167e5c9c5c05b50846a72b771bbe94cd6d9404aa25727075c",
    "1": "0x6b0c5a58d722eeB65e9Def9b0FaDdfeEEd610Dc8",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x87d742351c42f14167e5c9c5c05b50846a72b771bbe94cd6d9404aa25727075c",
    "recipient": "0x6b0c5a58d722eeB65e9Def9b0FaDdfeEEd610Dc8",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x87d742351c42f14167e5c9c5c05b50846a72b771bbe94cd6d9404aa25727075c0000000000000000000000006b0c5a58d722eeb65e9def9b0faddfeeed610dc800000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 96 8e 46 40>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 96 8e 46 40>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'YUWQ2q5cmxPJem+fEN1Yyw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Mtbr0xE+ZZWNMi5DOTS71yLTcvY='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Mtbr0xE+ZZWNMi5DOTS71yLTcvY='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5
(node:26310) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x4849aa3e7d154c23f8ea4921a0bc57d4e0d790e84e68458d7b807262ecbd86aa",
  "blockHash": "0xb0f691ffc02934bac52789d57cc486b6fee896b4b687eddbb77ae2182ee721e0",
  "blockNumber": 107,
  "address": "0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5",
  "type": "mined",
  "id": "log_03bfdd34",
  "returnValues": {
    "0": "0x56f278c43876fc68f5b180154b2f6a867770c15a62407d46e9f8ba87c38897ca",
    "1": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x56f278c43876fc68f5b180154b2f6a867770c15a62407d46e9f8ba87c38897ca",
    "recipient": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x56f278c43876fc68f5b180154b2f6a867770c15a62407d46e9f8ba87c38897ca000000000000000000000000cfc8c25636fe7b011d599002290f579b2ac9f5d100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x6a25771278fdf956deedb8ffdd91511ea39272825f133e880e97651a4f09da5d",
  "blockHash": "0x674ed499d34af58d6e8bce8473e481011522c1718d1bc9b569a70dc4eadd85e5",
  "blockNumber": 114,
  "address": "0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5",
  "type": "mined",
  "id": "log_01a86254",
  "returnValues": {
    "0": "0x088923922c7865679357cc41039a7a875028ca314aa96dbce10851242f8b31f9",
    "1": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x088923922c7865679357cc41039a7a875028ca314aa96dbce10851242f8b31f9",
    "recipient": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x088923922c7865679357cc41039a7a875028ca314aa96dbce10851242f8b31f9000000000000000000000000cfc8c25636fe7b011d599002290f579b2ac9f5d100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 38 cb de d6>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 38 cb de d6>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'FoQSmxRhe0uW8FS1FftRGQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'KMNbBjPVMXVnE+WCiY4OKjnly70='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'KMNbBjPVMXVnE+WCiY4OKjnly70='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x44240e67473f65D177d5e13b7128fcf9D7794f0d
(node:26519) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xb9f69c833ebcb59ae1a3eeab7e3f11f3fc266f5d9e594633db19814ac56b29c1",
  "blockHash": "0x1ad8a43aaff9067681148cf94b341b36c5c381dd805a8e319b32c243c7a6562a",
  "blockNumber": 133,
  "address": "0x44240e67473f65D177d5e13b7128fcf9D7794f0d",
  "type": "mined",
  "id": "log_6374427c",
  "returnValues": {
    "0": "0x6108653f7b1f9d85e6c39f05ba362e15aa845c43377352131571aa6a6da4c13c",
    "1": "0x6663605f3f8F1Af7214C1f7cb89f61D251470cF4",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x6108653f7b1f9d85e6c39f05ba362e15aa845c43377352131571aa6a6da4c13c",
    "recipient": "0x6663605f3f8F1Af7214C1f7cb89f61D251470cF4",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x6108653f7b1f9d85e6c39f05ba362e15aa845c43377352131571aa6a6da4c13c0000000000000000000000006663605f3f8f1af7214c1f7cb89f61d251470cf400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x8737f0016bb7d0f3d1ab764ee5712c63d021f3e345dc5fa6079346021c87170d",
  "blockHash": "0x0abaf27be015c71bb97cd3815d82e2134a21b2994594e5a2e7dc8eddbee9dcad",
  "blockNumber": 140,
  "address": "0x44240e67473f65D177d5e13b7128fcf9D7794f0d",
  "type": "mined",
  "id": "log_b746de8f",
  "returnValues": {
    "0": "0x07d5124a081ba9e0f5f280fbcae3e8168635622b70d5b629642357de977d926b",
    "1": "0x6663605f3f8F1Af7214C1f7cb89f61D251470cF4",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x07d5124a081ba9e0f5f280fbcae3e8168635622b70d5b629642357de977d926b",
    "recipient": "0x6663605f3f8F1Af7214C1f7cb89f61D251470cF4",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x07d5124a081ba9e0f5f280fbcae3e8168635622b70d5b629642357de977d926b0000000000000000000000006663605f3f8f1af7214c1f7cb89f61d251470cf400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer f0 1b b5 ac>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer f0 1b b5 ac>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'lzZbtwrHMxXux/jCVPbHoQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'bSm1/P99vGcEBgStgZpe2YSuzmo='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'bSm1/P99vGcEBgStgZpe2YSuzmo='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x8711C9E8C8010F09C182238c237D4095a21342e2
(node:26746) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xf940ec11a9c04d947b8a573093ae4727b5726c9fe89eefe8261f0c6b6e2da70c",
  "blockHash": "0xc2a8749e28f6ccf94e83b9b6382c326b736923aa690d40ab90c1a4572704ed5a",
  "blockNumber": 159,
  "address": "0x8711C9E8C8010F09C182238c237D4095a21342e2",
  "type": "mined",
  "id": "log_a4293417",
  "returnValues": {
    "0": "0x8130d649623bca04ed0a9e99bb042969c720a1cf312a70ea2345af5b7be96c9d",
    "1": "0x380D85Ac710f312a7D77CEa20D1FB9f2C4B30730",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x8130d649623bca04ed0a9e99bb042969c720a1cf312a70ea2345af5b7be96c9d",
    "recipient": "0x380D85Ac710f312a7D77CEa20D1FB9f2C4B30730",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x8130d649623bca04ed0a9e99bb042969c720a1cf312a70ea2345af5b7be96c9d000000000000000000000000380d85ac710f312a7d77cea20d1fb9f2c4b3073000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xc9343aa1a478c4411371cc0cba66c6dca524b5de6ba0c8099cd7b0ed9f1184c5",
  "blockHash": "0xf3f0dc3505ec2b5af4709763da070b6806bb5321b8a16cd1c9e8b7f41627e885",
  "blockNumber": 166,
  "address": "0x8711C9E8C8010F09C182238c237D4095a21342e2",
  "type": "mined",
  "id": "log_f500a73e",
  "returnValues": {
    "0": "0xe2e22409bee5a51d82600341e3f03cd0ccc6c50891d50d8c3b00aed44be1ae75",
    "1": "0x380D85Ac710f312a7D77CEa20D1FB9f2C4B30730",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0xe2e22409bee5a51d82600341e3f03cd0ccc6c50891d50d8c3b00aed44be1ae75",
    "recipient": "0x380D85Ac710f312a7D77CEa20D1FB9f2C4B30730",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xe2e22409bee5a51d82600341e3f03cd0ccc6c50891d50d8c3b00aed44be1ae75000000000000000000000000380d85ac710f312a7d77cea20d1fb9f2c4b3073000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 70 99 04 b7>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 70 99 04 b7>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'YAZAw0GOZY8cIdWIKY6ugQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'rnedDOkXq61LHFpUy0BEKrLgwiU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'rnedDOkXq61LHFpUy0BEKrLgwiU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xd909Cf671b79CEEEb54D37cafcFde3473469aC4c
(node:26862) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x64e24472ea7fd662ae10c664d714510faec619a50b7d97b79dcfcdf20b5b3fe4",
  "blockHash": "0xc2f695ab8568c230a8e805b6921705e5fd11d71ae938fef66cf762c0e2beaa52",
  "blockNumber": 185,
  "address": "0xd909Cf671b79CEEEb54D37cafcFde3473469aC4c",
  "type": "mined",
  "id": "log_106ea75d",
  "returnValues": {
    "0": "0xa620c01d053f18369d45c1ad4965faea9ac702bdb02e33e8a9e2826ba6ee7a60",
    "1": "0xC6870e84a108bEcD861535871a6E682a745f9d03",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0xa620c01d053f18369d45c1ad4965faea9ac702bdb02e33e8a9e2826ba6ee7a60",
    "recipient": "0xC6870e84a108bEcD861535871a6E682a745f9d03",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xa620c01d053f18369d45c1ad4965faea9ac702bdb02e33e8a9e2826ba6ee7a60000000000000000000000000c6870e84a108becd861535871a6e682a745f9d0300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x1d87cc09d7debbe51d5bf1a2435808e5660cc8b1389bccb80e176ba70dfd1d01",
  "blockHash": "0x88a68e3961ed5072e1b1bd106cbf577d0bb37e1a0da7917cddd02caa8344e61f",
  "blockNumber": 192,
  "address": "0xd909Cf671b79CEEEb54D37cafcFde3473469aC4c",
  "type": "mined",
  "id": "log_bf325e27",
  "returnValues": {
    "0": "0x220f4a382f7b9b0e8e1275c77093e4d7ba7542bfd5d63c5677c7d0cea7bf1064",
    "1": "0xC6870e84a108bEcD861535871a6E682a745f9d03",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x220f4a382f7b9b0e8e1275c77093e4d7ba7542bfd5d63c5677c7d0cea7bf1064",
    "recipient": "0xC6870e84a108bEcD861535871a6E682a745f9d03",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x220f4a382f7b9b0e8e1275c77093e4d7ba7542bfd5d63c5677c7d0cea7bf1064000000000000000000000000c6870e84a108becd861535871a6e682a745f9d0300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer f7 96 21 ac>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer f7 96 21 ac>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'8H6k2Kki5rZPztMbJwDeLA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'DHsNUCQwBlyF+0fAkgKLgCX5iH4='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'DHsNUCQwBlyF+0fAkgKLgCX5iH4='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xdf337958125994C40df5A270dd7eacCAD5c51231
(node:27494) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xfbe79b28c3652298424badc24eaf55f1c77e74ceafdc46373ea298050dab9c51",
  "blockHash": "0x39c0611116458fa5d5c301d80df15231bdbea5a4add89a01bae16f49255f3ae2",
  "blockNumber": 211,
  "address": "0xdf337958125994C40df5A270dd7eacCAD5c51231",
  "type": "mined",
  "id": "log_bb9bed91",
  "returnValues": {
    "0": "0xbf8765aa3a6b0f94066b5f653c2afcabc9491120aa42487d4ccc081109e0c740",
    "1": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0xbf8765aa3a6b0f94066b5f653c2afcabc9491120aa42487d4ccc081109e0c740",
    "recipient": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xbf8765aa3a6b0f94066b5f653c2afcabc9491120aa42487d4ccc081109e0c740000000000000000000000000953273141113705491dfbcab46f6fed4d4d2b61b00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x2f5c64e80907e0c984e8e34c9f749d29fde80f2a4c5279f6864dc5883d73c8ff",
  "blockHash": "0xdad10831ca79c48785d544debed72b49bdaba5272494a4a90ac15fdbe46bc2e0",
  "blockNumber": 218,
  "address": "0xdf337958125994C40df5A270dd7eacCAD5c51231",
  "type": "mined",
  "id": "log_023a36b5",
  "returnValues": {
    "0": "0x53b4f8834c668b22eb1418657c554c890b96535a17258ef129331c42738f73fd",
    "1": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x53b4f8834c668b22eb1418657c554c890b96535a17258ef129331c42738f73fd",
    "recipient": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x53b4f8834c668b22eb1418657c554c890b96535a17258ef129331c42738f73fd000000000000000000000000953273141113705491dfbcab46f6fed4d4d2b61b00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x5bb9b53dcea16feb044c9f0ed5309ebc2dd50221461ae48b0e11df5565a880da",
  "blockHash": "0x4b0b9a2d4be6935d9d8b16e72d9d633c154eff28d12bb0b7bf82c121250b54ef",
  "blockNumber": 225,
  "address": "0xdf337958125994C40df5A270dd7eacCAD5c51231",
  "type": "mined",
  "id": "log_9a45a8e4",
  "returnValues": {
    "0": "0x62d70c3db2f62ae84459362715d7502039d16c757c065cf2e734141c62ad0107",
    "1": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "2": "calculate_proportional",
    "3": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x62d70c3db2f62ae84459362715d7502039d16c757c065cf2e734141c62ad0107",
    "recipient": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "queryType": "calculate_proportional",
    "originator": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x62d70c3db2f62ae84459362715d7502039d16c757c065cf2e734141c62ad0107000000000000000000000000953273141113705491dfbcab46f6fed4d4d2b61b00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e5af626dab849c8aca87fb27c063c5845dbef2440000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x5bb9b53dcea16feb044c9f0ed5309ebc2dd50221461ae48b0e11df5565a880da",
  "blockHash": "0x4b0b9a2d4be6935d9d8b16e72d9d633c154eff28d12bb0b7bf82c121250b54ef",
  "blockNumber": 225,
  "address": "0xdf337958125994C40df5A270dd7eacCAD5c51231",
  "type": "mined",
  "id": "log_be861006",
  "returnValues": {
    "0": "0xb9cb14b75bfce3b12ac6b249d90c46075932c8faa247bff5c3cc172c9d0224ab",
    "1": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "2": "calculate_proportional",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0xb9cb14b75bfce3b12ac6b249d90c46075932c8faa247bff5c3cc172c9d0224ab",
    "recipient": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "queryType": "calculate_proportional",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xb9cb14b75bfce3b12ac6b249d90c46075932c8faa247bff5c3cc172c9d0224ab000000000000000000000000953273141113705491dfbcab46f6fed4d4d2b61b00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x5bb9b53dcea16feb044c9f0ed5309ebc2dd50221461ae48b0e11df5565a880da",
  "blockHash": "0x4b0b9a2d4be6935d9d8b16e72d9d633c154eff28d12bb0b7bf82c121250b54ef",
  "blockNumber": 225,
  "address": "0xdf337958125994C40df5A270dd7eacCAD5c51231",
  "type": "mined",
  "id": "log_bc08ad0d",
  "returnValues": {
    "0": "0x656f9e7a4684bcadc8674ae5e35a804928bba911d85930f81956af7d63c0d7da",
    "1": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x656f9e7a4684bcadc8674ae5e35a804928bba911d85930f81956af7d63c0d7da",
    "recipient": "0x953273141113705491DfbCaB46F6fEd4d4D2b61B",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x656f9e7a4684bcadc8674ae5e35a804928bba911d85930f81956af7d63c0d7da000000000000000000000000953273141113705491dfbcab46f6fed4d4d2b61b00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer cd a0 87 da>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer cd a0 87 da>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'xh6qINoz9QNAoLtqhm6GSQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'ivfJmR0HLOyh8wUTUV3Wn3zOfbU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'ivfJmR0HLOyh8wUTUV3Wn3zOfbU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xd25e6A18Db7b411dB4cB90db0BddDEa92177Cb90
(node:27687) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x291ecab067a9d90fa6938f2b939ff0aa055b3b77313b9fefe017d7bfd358f1f7",
  "blockHash": "0x839b6df030113c28775e5c1925709766487544bc8da011b43207bf6db7e3e5d8",
  "blockNumber": 246,
  "address": "0xd25e6A18Db7b411dB4cB90db0BddDEa92177Cb90",
  "type": "mined",
  "id": "log_fec49761",
  "returnValues": {
    "0": "0x92dd5af4a320181b3ffb46703439e0d0538dadb2c011146ef259bbb68969ec8b",
    "1": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x92dd5af4a320181b3ffb46703439e0d0538dadb2c011146ef259bbb68969ec8b",
    "recipient": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x92dd5af4a320181b3ffb46703439e0d0538dadb2c011146ef259bbb68969ec8b000000000000000000000000c6a201fe36fba6bfa559d9227e99547f75dd3bc700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x37d0c5b274f061b68593ec47fad1e09e7725dda2734dc8674709635530504e36",
  "blockHash": "0x0795e7e642fa1c3844fdbfffc6ec0aa6c50ee6d0d766f3281ef9fd943896e881",
  "blockNumber": 253,
  "address": "0xd25e6A18Db7b411dB4cB90db0BddDEa92177Cb90",
  "type": "mined",
  "id": "log_5dbf3700",
  "returnValues": {
    "0": "0xa1e453e6dd16bd175766aca2910024c62c0f664283178635719bd687d97816e7",
    "1": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0xa1e453e6dd16bd175766aca2910024c62c0f664283178635719bd687d97816e7",
    "recipient": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xa1e453e6dd16bd175766aca2910024c62c0f664283178635719bd687d97816e7000000000000000000000000c6a201fe36fba6bfa559d9227e99547f75dd3bc700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0xe666efd471cfea4a3aca8d6c3177568f306dfb4f3b92869ea822735274cd3161",
  "blockHash": "0x143b280892f154d59867e0d9887da60a51a6fb56f7c6cd80c0a652ed8164d9ca",
  "blockNumber": 260,
  "address": "0xd25e6A18Db7b411dB4cB90db0BddDEa92177Cb90",
  "type": "mined",
  "id": "log_5d3fc778",
  "returnValues": {
    "0": "0x3b157f047d78884efcadee3d7fbf19bc9dd0e830c7eb6b99d21377f55277058d",
    "1": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "2": "calculate_proportional",
    "3": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x3b157f047d78884efcadee3d7fbf19bc9dd0e830c7eb6b99d21377f55277058d",
    "recipient": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "queryType": "calculate_proportional",
    "originator": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x3b157f047d78884efcadee3d7fbf19bc9dd0e830c7eb6b99d21377f55277058d000000000000000000000000c6a201fe36fba6bfa559d9227e99547f75dd3bc700000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e5af626dab849c8aca87fb27c063c5845dbef2440000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0xe666efd471cfea4a3aca8d6c3177568f306dfb4f3b92869ea822735274cd3161",
  "blockHash": "0x143b280892f154d59867e0d9887da60a51a6fb56f7c6cd80c0a652ed8164d9ca",
  "blockNumber": 260,
  "address": "0xd25e6A18Db7b411dB4cB90db0BddDEa92177Cb90",
  "type": "mined",
  "id": "log_c5374152",
  "returnValues": {
    "0": "0x54154fb1a0f29c4edcec7784ef0c44da1739005f52872c0c9fcb1405cc399842",
    "1": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "2": "calculate_proportional",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x54154fb1a0f29c4edcec7784ef0c44da1739005f52872c0c9fcb1405cc399842",
    "recipient": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "queryType": "calculate_proportional",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x54154fb1a0f29c4edcec7784ef0c44da1739005f52872c0c9fcb1405cc399842000000000000000000000000c6a201fe36fba6bfa559d9227e99547f75dd3bc700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xe666efd471cfea4a3aca8d6c3177568f306dfb4f3b92869ea822735274cd3161",
  "blockHash": "0x143b280892f154d59867e0d9887da60a51a6fb56f7c6cd80c0a652ed8164d9ca",
  "blockNumber": 260,
  "address": "0xd25e6A18Db7b411dB4cB90db0BddDEa92177Cb90",
  "type": "mined",
  "id": "log_39e14b51",
  "returnValues": {
    "0": "0xf1c54c89f6422b8e682607738df34a062d474c4e711a74d65018f80adebf62ad",
    "1": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0xf1c54c89f6422b8e682607738df34a062d474c4e711a74d65018f80adebf62ad",
    "recipient": "0xc6a201fe36FBA6BFA559D9227E99547F75DD3BC7",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xf1c54c89f6422b8e682607738df34a062d474c4e711a74d65018f80adebf62ad000000000000000000000000c6a201fe36fba6bfa559d9227e99547f75dd3bc700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer f1 5e 56 2e>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer f1 5e 56 2e>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'IrDlk+gj/Z4A8IWbE8US3g=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'KBLUUH+KL9rnedEquY5dpfKKgKw='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'KBLUUH+KL9rnedEquY5dpfKKgKw='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xB359096211f6E3547234F7f010Ea37215DA46DbA
(node:29275) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x01ce061b8badfda168a2bca90cc6e285bfe0cd476e58bd17b32e4279cf4138a3",
  "blockHash": "0x289f3077646c60d28d175575538703a86d9bad687570d69611103be2c1cf5b30",
  "blockNumber": 281,
  "address": "0xB359096211f6E3547234F7f010Ea37215DA46DbA",
  "type": "mined",
  "id": "log_356468f2",
  "returnValues": {
    "0": "0x6c66d2220f21a9cb1c3a353e7eec51b4071b9aa3dd8d7072f4a561bfe1ae717d",
    "1": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x6c66d2220f21a9cb1c3a353e7eec51b4071b9aa3dd8d7072f4a561bfe1ae717d",
    "recipient": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x6c66d2220f21a9cb1c3a353e7eec51b4071b9aa3dd8d7072f4a561bfe1ae717d00000000000000000000000072e300efe7afc77f58141e7da4d4325cfae3db9300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x01a197ec17af9be928e98134f501c2c0b07241c5940d655fbd05b7a5c9b981a6",
  "blockHash": "0x771c9a51e42d0792966e64b743361f8600363165381e8262ca73ecc5e42974e7",
  "blockNumber": 288,
  "address": "0xB359096211f6E3547234F7f010Ea37215DA46DbA",
  "type": "mined",
  "id": "log_52566910",
  "returnValues": {
    "0": "0xe1b2c6afa4158bc4ac9e9e957cb316346350811d02fb35a2dbad5125cd990402",
    "1": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0xe1b2c6afa4158bc4ac9e9e957cb316346350811d02fb35a2dbad5125cd990402",
    "recipient": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xe1b2c6afa4158bc4ac9e9e957cb316346350811d02fb35a2dbad5125cd99040200000000000000000000000072e300efe7afc77f58141e7da4d4325cfae3db9300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x2ae92c816d39a4defb1326ce224be795edac795a941902a9dd25d129724dc5a8",
  "blockHash": "0x6429d7a4cb202956c6a9a49acc756af1008f4fb106c2aab2efc14804f2df3600",
  "blockNumber": 295,
  "address": "0xB359096211f6E3547234F7f010Ea37215DA46DbA",
  "type": "mined",
  "id": "log_af873023",
  "returnValues": {
    "0": "0xbce9f5aeb70b924bcde4f0fb07ab4158abeab6857646ed182f47105c3ff9c08e",
    "1": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "2": "calculate_proportional",
    "3": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0xbce9f5aeb70b924bcde4f0fb07ab4158abeab6857646ed182f47105c3ff9c08e",
    "recipient": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "queryType": "calculate_proportional",
    "originator": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xbce9f5aeb70b924bcde4f0fb07ab4158abeab6857646ed182f47105c3ff9c08e00000000000000000000000072e300efe7afc77f58141e7da4d4325cfae3db9300000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e5af626dab849c8aca87fb27c063c5845dbef2440000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x2ae92c816d39a4defb1326ce224be795edac795a941902a9dd25d129724dc5a8",
  "blockHash": "0x6429d7a4cb202956c6a9a49acc756af1008f4fb106c2aab2efc14804f2df3600",
  "blockNumber": 295,
  "address": "0xB359096211f6E3547234F7f010Ea37215DA46DbA",
  "type": "mined",
  "id": "log_60afa850",
  "returnValues": {
    "0": "0x2b78c125f62babd30905e6fcef9d4ca9bbad94a3c9761e064a6b97d81c8b366f",
    "1": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "2": "calculate_proportional",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x2b78c125f62babd30905e6fcef9d4ca9bbad94a3c9761e064a6b97d81c8b366f",
    "recipient": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "queryType": "calculate_proportional",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x2b78c125f62babd30905e6fcef9d4ca9bbad94a3c9761e064a6b97d81c8b366f00000000000000000000000072e300efe7afc77f58141e7da4d4325cfae3db9300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x2ae92c816d39a4defb1326ce224be795edac795a941902a9dd25d129724dc5a8",
  "blockHash": "0x6429d7a4cb202956c6a9a49acc756af1008f4fb106c2aab2efc14804f2df3600",
  "blockNumber": 295,
  "address": "0xB359096211f6E3547234F7f010Ea37215DA46DbA",
  "type": "mined",
  "id": "log_8202543b",
  "returnValues": {
    "0": "0x2ef826c7e2464c13d477268050066e9b23be36ffb46d00d12dbb43137b6ba3f9",
    "1": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x2ef826c7e2464c13d477268050066e9b23be36ffb46d00d12dbb43137b6ba3f9",
    "recipient": "0x72E300efE7Afc77F58141E7dA4D4325CfAE3db93",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x2ef826c7e2464c13d477268050066e9b23be36ffb46d00d12dbb43137b6ba3f900000000000000000000000072e300efe7afc77f58141e7da4d4325cfae3db9300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer be 1d 3e 40>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer be 1d 3e 40>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'xzGvBXC3SptwR2ALjX3hRA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'cdOAN46o+cv4qtKrgfx4/a8JXa0='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'cdOAN46o+cv4qtKrgfx4/a8JXa0='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xb9A6584E350eBC49c68a00965919DE2a6C7b07CB
(node:31047) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x8cb49ea84f412a17178e02e45de947bc51ab3ee9256ff272583e8c3c5767c991",
  "blockHash": "0xeae448c16d06591e47a988c6c5bf009ffba7fa22ea0b2314bd203fec33c3876b",
  "blockNumber": 31,
  "address": "0xb9A6584E350eBC49c68a00965919DE2a6C7b07CB",
  "type": "mined",
  "id": "log_7df7a594",
  "returnValues": {
    "0": "0x2398d562577c13ee9d77df46111df53d120eb5aae1a22708b7a3857ff17ef8ad",
    "1": "0x7d4417ca6D0016213070f26E161D534966865c42",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x2398d562577c13ee9d77df46111df53d120eb5aae1a22708b7a3857ff17ef8ad",
    "recipient": "0x7d4417ca6D0016213070f26E161D534966865c42",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x2398d562577c13ee9d77df46111df53d120eb5aae1a22708b7a3857ff17ef8ad0000000000000000000000007d4417ca6d0016213070f26e161d534966865c4200000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 18 90 a5 d1>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 18 90 a5 d1>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'gn1VtrFDp5HTXgumYn1IcA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'1oAEKx8PcSMkgJ7wwq/BXYL2waw='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'1oAEKx8PcSMkgJ7wwq/BXYL2waw='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x9C17ec7C261EFAa88abbFFA29E00DE038944D4c9
(node:31399) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x77e4a8082ecb4d1c93b0b80b1129ac654ddbb6b93bb97277959d19efb0a8e216",
  "blockHash": "0xdbd82a5348e6a23aea931acaea230d54cc32ea4d1011ae6fe4e89eeff0da7ca8",
  "blockNumber": 50,
  "address": "0x9C17ec7C261EFAa88abbFFA29E00DE038944D4c9",
  "type": "mined",
  "id": "log_62083801",
  "returnValues": {
    "0": "0xbb1d790dc6f72412805aa35c8641926ee288409f102fd8609e7609063725a21d",
    "1": "0x65043d0b49B0dbd511Dff8f29aF48eaE5951fEFB",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0xbb1d790dc6f72412805aa35c8641926ee288409f102fd8609e7609063725a21d",
    "recipient": "0x65043d0b49B0dbd511Dff8f29aF48eaE5951fEFB",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xbb1d790dc6f72412805aa35c8641926ee288409f102fd8609e7609063725a21d00000000000000000000000065043d0b49b0dbd511dff8f29af48eae5951fefb00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer b4 f3 f4 d0>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer b4 f3 f4 d0>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'RwQX5ksc+TupnINy+5+LjA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Wfq5wPZI2fpcL3gobRQvb8GviT0='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Wfq5wPZI2fpcL3gobRQvb8GviT0='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xbF03059e9508E722cE83Af313eBb742c3eC0642a
(node:31811) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x8f86846a555e6708fc0978a60bf3cd2ec7bbadce1f5c6a2edfeab88ace2d5147",
  "blockHash": "0xe6358634b7dac811264cbde5b60c3f230020aaaf0db39b703386ffe91951c641",
  "blockNumber": 69,
  "address": "0xbF03059e9508E722cE83Af313eBb742c3eC0642a",
  "type": "mined",
  "id": "log_90b28c1f",
  "returnValues": {
    "0": "0xe41f09e74d47307ad07663102f379994d2e55ba8bc0875e3386f04de08e8cc19",
    "1": "0x700E87338e1CFcfEB4169194cF0267AEac170b27",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0xe41f09e74d47307ad07663102f379994d2e55ba8bc0875e3386f04de08e8cc19",
    "recipient": "0x700E87338e1CFcfEB4169194cF0267AEac170b27",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xe41f09e74d47307ad07663102f379994d2e55ba8bc0875e3386f04de08e8cc19000000000000000000000000700e87338e1cfcfeb4169194cf0267aeac170b2700000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 2e 4c 39 fe>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 2e 4c 39 fe>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'Ddr9kH3i5ZxwjV+NX8HjFQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'U5+OILMD6EAbGcCxT51rkl/fTtY='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'U5+OILMD6EAbGcCxT51rkl/fTtY='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x8B9AF826a5356516CAB6400d7D1E9fB126a65b12
(node:31999) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xcfbbfadd4b01474db3737725b4358e41cb1a8170c98451ec71e4886338b0f98e",
  "blockHash": "0xd01d54cfd4a0f83404529f37fc75bb6904b5dbbecf034ec5efca1881f763747d",
  "blockNumber": 88,
  "address": "0x8B9AF826a5356516CAB6400d7D1E9fB126a65b12",
  "type": "mined",
  "id": "log_ab68b929",
  "returnValues": {
    "0": "0x96346035ad9a8e6206f58c889f74157ccd6f05c08ff8262474cbd4f63ec7fb39",
    "1": "0x6b0c5a58d722eeB65e9Def9b0FaDdfeEEd610Dc8",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x96346035ad9a8e6206f58c889f74157ccd6f05c08ff8262474cbd4f63ec7fb39",
    "recipient": "0x6b0c5a58d722eeB65e9Def9b0FaDdfeEEd610Dc8",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x96346035ad9a8e6206f58c889f74157ccd6f05c08ff8262474cbd4f63ec7fb390000000000000000000000006b0c5a58d722eeb65e9def9b0faddfeeed610dc800000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer fc 5e d3 e5>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer fc 5e d3 e5>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'lTq4URNuoh9g8HYxUPhyZA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'20MoymyQVUePrq6ESGV6GPSYKug='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'20MoymyQVUePrq6ESGV6GPSYKug='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5
(node:32167) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x4849aa3e7d154c23f8ea4921a0bc57d4e0d790e84e68458d7b807262ecbd86aa",
  "blockHash": "0x89a36bbd90379d09fdf9ced977120df65a762d4e9f77b233375b191cd37e5bed",
  "blockNumber": 107,
  "address": "0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5",
  "type": "mined",
  "id": "log_64298331",
  "returnValues": {
    "0": "0xa44571468b5ec70000d7145212a6c1de8798f58212fe167418988812bc102985",
    "1": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0xa44571468b5ec70000d7145212a6c1de8798f58212fe167418988812bc102985",
    "recipient": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xa44571468b5ec70000d7145212a6c1de8798f58212fe167418988812bc102985000000000000000000000000cfc8c25636fe7b011d599002290f579b2ac9f5d100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x6a25771278fdf956deedb8ffdd91511ea39272825f133e880e97651a4f09da5d",
  "blockHash": "0x031b1177cbe7f4026d62babe2775ed4988c701227b0749c265c837a5bb3bd76b",
  "blockNumber": 114,
  "address": "0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5",
  "type": "mined",
  "id": "log_f3dbadd6",
  "returnValues": {
    "0": "0x4ae00b93e820d770db18285879584434cf1cd4cc06de550a9bf846c1370c9420",
    "1": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x4ae00b93e820d770db18285879584434cf1cd4cc06de550a9bf846c1370c9420",
    "recipient": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x4ae00b93e820d770db18285879584434cf1cd4cc06de550a9bf846c1370c9420000000000000000000000000cfc8c25636fe7b011d599002290f579b2ac9f5d100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x8b1f9a162ef5f7fee64d58e6f1cef7ba29ef1dd2a664df4e98e226dff8700242",
  "blockHash": "0x104efc7b7e5ed7b5ec4def44c0fe008795052b3a17e446113c8fa78fa7d03e18",
  "blockNumber": 121,
  "address": "0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5",
  "type": "mined",
  "id": "log_0c54841f",
  "returnValues": {
    "0": "0x2e090728fafaf03a8b52528411978bb94574e9c51afd6628023d5eb5dc32e464",
    "1": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "2": "calculate_proportional",
    "3": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x2e090728fafaf03a8b52528411978bb94574e9c51afd6628023d5eb5dc32e464",
    "recipient": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "queryType": "calculate_proportional",
    "originator": "0xe5af626daB849c8acA87FB27c063C5845DBEf244",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x2e090728fafaf03a8b52528411978bb94574e9c51afd6628023d5eb5dc32e464000000000000000000000000cfc8c25636fe7b011d599002290f579b2ac9f5d100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000e5af626dab849c8aca87fb27c063c5845dbef2440000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0xe5af626daB849c8acA87FB27c063C5845DBEf244
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x8b1f9a162ef5f7fee64d58e6f1cef7ba29ef1dd2a664df4e98e226dff8700242",
  "blockHash": "0x104efc7b7e5ed7b5ec4def44c0fe008795052b3a17e446113c8fa78fa7d03e18",
  "blockNumber": 121,
  "address": "0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5",
  "type": "mined",
  "id": "log_6beaa0b1",
  "returnValues": {
    "0": "0x57f4b07295b47b79acd113c9e7cf5551f47b34e52b41be63dcfec710c3705e8b",
    "1": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "2": "calculate_proportional",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x57f4b07295b47b79acd113c9e7cf5551f47b34e52b41be63dcfec710c3705e8b",
    "recipient": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "queryType": "calculate_proportional",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x57f4b07295b47b79acd113c9e7cf5551f47b34e52b41be63dcfec710c3705e8b000000000000000000000000cfc8c25636fe7b011d599002290f579b2ac9f5d100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca1569500000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x8b1f9a162ef5f7fee64d58e6f1cef7ba29ef1dd2a664df4e98e226dff8700242",
  "blockHash": "0x104efc7b7e5ed7b5ec4def44c0fe008795052b3a17e446113c8fa78fa7d03e18",
  "blockNumber": 121,
  "address": "0xe7e0f7FeFB17178838bE13Fe48f74981B7db95f5",
  "type": "mined",
  "id": "log_35bd4cc5",
  "returnValues": {
    "0": "0xf1b6ed90316e1a67b8dfebc9329ed14e10414d27de9311f690b76eaa0567676c",
    "1": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "2": "recalculate_max_price",
    "3": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0xf1b6ed90316e1a67b8dfebc9329ed14e10414d27de9311f690b76eaa0567676c",
    "recipient": "0xCfC8c25636FE7b011d599002290F579b2aC9F5d1",
    "queryType": "recalculate_max_price",
    "originator": "0x4C1F8ed81F6F3f602F3ce3d2e6a55Ad3Dca15695",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xf1b6ed90316e1a67b8dfebc9329ed14e10414d27de9311f690b76eaa0567676c000000000000000000000000cfc8c25636fe7b011d599002290f579b2ac9f5d100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000004c1f8ed81f6f3f602f3ce3d2e6a55ad3dca15695000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 11 54 d0 dd>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 11 54 d0 dd>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'HVlerqmfA2/VGu4PQHjIVg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'i4zrPQD481fyRyQztksSbdXwDcQ='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'i4zrPQD481fyRyQztksSbdXwDcQ='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
(node:4879) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x4b8c62d1e7c515839fee4c04d3a3e7867be8c9fdffa8f563c54ae307d10a3189",
  "blockHash": "0xd5457d61d7f3d8f8ab1fd88025b919fe3c5b8e7bbf1177f66d7aff08e37b8fd5",
  "blockNumber": 18,
  "address": "0xDadF3ae03219177284c870F620e4CBC8a6EDB552",
  "type": "mined",
  "id": "log_4e41bcdb",
  "returnValues": {
    "0": "0x440bf2461385825dd917548e1575aeed7be04f586b8f80b2a6f57dd006485ddf",
    "1": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x440bf2461385825dd917548e1575aeed7be04f586b8f80b2a6f57dd006485ddf",
    "recipient": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x440bf2461385825dd917548e1575aeed7be04f586b8f80b2a6f57dd006485ddf0000000000000000000000005fe1da0bb7e1043786658cffb92b2135639eb56f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xc0866065d0445f1f45fac11c30517ca60b5a1bbafd88e25fc9df542ab19203e5",
  "blockHash": "0xd704e198e26105458f6a9e5628f197b1f34f30d8e1e9087aad4d4423c842f7f8",
  "blockNumber": 25,
  "address": "0xDadF3ae03219177284c870F620e4CBC8a6EDB552",
  "type": "mined",
  "id": "log_ecfaa1d5",
  "returnValues": {
    "0": "0x7d92e6c5799414dc2851bc6f62689791d4f642568164bc14213cf69d5e2f065a",
    "1": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x7d92e6c5799414dc2851bc6f62689791d4f642568164bc14213cf69d5e2f065a",
    "recipient": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x7d92e6c5799414dc2851bc6f62689791d4f642568164bc14213cf69d5e2f065a0000000000000000000000005fe1da0bb7e1043786658cffb92b2135639eb56f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x25fd53a7fe702755d6526d8ce2fcfccd1dfb4b590c9412f8e5c7861f523bc5b4",
  "blockHash": "0xeb74ae4fa6458a7a869afb2733e3e1da64a6401c9a73ec24dd5c222fdd6b2039",
  "blockNumber": 32,
  "address": "0xDadF3ae03219177284c870F620e4CBC8a6EDB552",
  "type": "mined",
  "id": "log_a3f16996",
  "returnValues": {
    "0": "0x02c2f1a041905ed85b9c96a49b8e36a736a0ec1c80179292b440c9a26bc76bc6",
    "1": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x02c2f1a041905ed85b9c96a49b8e36a736a0ec1c80179292b440c9a26bc76bc6",
    "recipient": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x02c2f1a041905ed85b9c96a49b8e36a736a0ec1c80179292b440c9a26bc76bc60000000000000000000000005fe1da0bb7e1043786658cffb92b2135639eb56f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x25fd53a7fe702755d6526d8ce2fcfccd1dfb4b590c9412f8e5c7861f523bc5b4",
  "blockHash": "0xeb74ae4fa6458a7a869afb2733e3e1da64a6401c9a73ec24dd5c222fdd6b2039",
  "blockNumber": 32,
  "address": "0xDadF3ae03219177284c870F620e4CBC8a6EDB552",
  "type": "mined",
  "id": "log_de684bb8",
  "returnValues": {
    "0": "0xcae8e3a9f428f420d4a334aab15780e3c4dcaf899f90f4f7d4611f0e6b0c19d4",
    "1": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0xcae8e3a9f428f420d4a334aab15780e3c4dcaf899f90f4f7d4611f0e6b0c19d4",
    "recipient": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xcae8e3a9f428f420d4a334aab15780e3c4dcaf899f90f4f7d4611f0e6b0c19d40000000000000000000000005fe1da0bb7e1043786658cffb92b2135639eb56f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x25fd53a7fe702755d6526d8ce2fcfccd1dfb4b590c9412f8e5c7861f523bc5b4",
  "blockHash": "0xeb74ae4fa6458a7a869afb2733e3e1da64a6401c9a73ec24dd5c222fdd6b2039",
  "blockNumber": 32,
  "address": "0xDadF3ae03219177284c870F620e4CBC8a6EDB552",
  "type": "mined",
  "id": "log_c4c34f13",
  "returnValues": {
    "0": "0xbf8e0094c6edb16df5a461d4e81b4d29622a11e5b07cdd21cbfa39c6c285b9f9",
    "1": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0xbf8e0094c6edb16df5a461d4e81b4d29622a11e5b07cdd21cbfa39c6c285b9f9",
    "recipient": "0x5Fe1dA0BB7e1043786658cFfb92b2135639eb56F",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xbf8e0094c6edb16df5a461d4e81b4d29622a11e5b07cdd21cbfa39c6c285b9f90000000000000000000000005fe1da0bb7e1043786658cffb92b2135639eb56f00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 5f 9e 7f fc>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 5f 9e 7f fc>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'zeWia77iaZ3IF3lfz1iS7g=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'MG06mKPwfPq7vn2uX4FIxuh3RNg='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'MG06mKPwfPq7vn2uX4FIxuh3RNg='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x04F7E0dEE1338C2F6F76680649B877AA55d0cfaB
(node:5532) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xf3d81e5f8cba210506788ecbb4169981651fd91eb2924338964b7257a693d7ae",
  "blockHash": "0x2e9cec6b9376c3e88ec6817628297888f1fc568a533a5e15d1683603bab09c24",
  "blockNumber": 53,
  "address": "0x04F7E0dEE1338C2F6F76680649B877AA55d0cfaB",
  "type": "mined",
  "id": "log_cb9a17e0",
  "returnValues": {
    "0": "0x22c3c15abfc5ce756c0b42e10870d2f6a7f0d366a7cd921216ad093372b9b52e",
    "1": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x22c3c15abfc5ce756c0b42e10870d2f6a7f0d366a7cd921216ad093372b9b52e",
    "recipient": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x22c3c15abfc5ce756c0b42e10870d2f6a7f0d366a7cd921216ad093372b9b52e00000000000000000000000090b1cdb36a3b54767bdfd4ed5ec584c32dad4dc800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xd347540d32d531f533425220e9c983ddb29be1bc14782843c37eed2a4670a353",
  "blockHash": "0x4a67e1955560b8b9a873972bcbe7e902ac16b7826004772d8f2bc4cfc8fe6cf7",
  "blockNumber": 60,
  "address": "0x04F7E0dEE1338C2F6F76680649B877AA55d0cfaB",
  "type": "mined",
  "id": "log_10b808b3",
  "returnValues": {
    "0": "0x119ab25bb7f587cab1a530d5033b758065ddf2a404e4df1ca62bb4628ed77a1d",
    "1": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x119ab25bb7f587cab1a530d5033b758065ddf2a404e4df1ca62bb4628ed77a1d",
    "recipient": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x119ab25bb7f587cab1a530d5033b758065ddf2a404e4df1ca62bb4628ed77a1d00000000000000000000000090b1cdb36a3b54767bdfd4ed5ec584c32dad4dc800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x28532b96a311815d131e78e4e7e6491014926d3491121064db960f9d2d4f55af",
  "blockHash": "0xbd60ba0be9c0ee68473e6b90829050e233d46805b1fa60093c862ac2b0755f61",
  "blockNumber": 67,
  "address": "0x04F7E0dEE1338C2F6F76680649B877AA55d0cfaB",
  "type": "mined",
  "id": "log_27c74eb7",
  "returnValues": {
    "0": "0x57193fa1c28dbd8a3c934807662a46bbcaec4a0110794d18155fba615bcbb907",
    "1": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x57193fa1c28dbd8a3c934807662a46bbcaec4a0110794d18155fba615bcbb907",
    "recipient": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x57193fa1c28dbd8a3c934807662a46bbcaec4a0110794d18155fba615bcbb90700000000000000000000000090b1cdb36a3b54767bdfd4ed5ec584c32dad4dc800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x28532b96a311815d131e78e4e7e6491014926d3491121064db960f9d2d4f55af",
  "blockHash": "0xbd60ba0be9c0ee68473e6b90829050e233d46805b1fa60093c862ac2b0755f61",
  "blockNumber": 67,
  "address": "0x04F7E0dEE1338C2F6F76680649B877AA55d0cfaB",
  "type": "mined",
  "id": "log_2edcb160",
  "returnValues": {
    "0": "0xd601ce9457519b9708a9f19744175e36206a4b2a755ac0f24b71bf2866404e10",
    "1": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0xd601ce9457519b9708a9f19744175e36206a4b2a755ac0f24b71bf2866404e10",
    "recipient": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xd601ce9457519b9708a9f19744175e36206a4b2a755ac0f24b71bf2866404e1000000000000000000000000090b1cdb36a3b54767bdfd4ed5ec584c32dad4dc800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x28532b96a311815d131e78e4e7e6491014926d3491121064db960f9d2d4f55af",
  "blockHash": "0xbd60ba0be9c0ee68473e6b90829050e233d46805b1fa60093c862ac2b0755f61",
  "blockNumber": 67,
  "address": "0x04F7E0dEE1338C2F6F76680649B877AA55d0cfaB",
  "type": "mined",
  "id": "log_b86ca4ea",
  "returnValues": {
    "0": "0x715812c7ecf277b30eaf57b442676b31799351b4fa7261bdd53a83e7cb982232",
    "1": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x715812c7ecf277b30eaf57b442676b31799351b4fa7261bdd53a83e7cb982232",
    "recipient": "0x90b1CdB36a3B54767Bdfd4Ed5eC584c32DAd4DC8",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x715812c7ecf277b30eaf57b442676b31799351b4fa7261bdd53a83e7cb98223200000000000000000000000090b1cdb36a3b54767bdfd4ed5ec584c32dad4dc800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 68 46 60 df>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 68 46 60 df>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'3DhTiCXLxkvWOVocjN1sQg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'9HubReM1oC4VtlS+xgC4Ef4WON8='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'9HubReM1oC4VtlS+xgC4Ef4WON8='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x79442E716a5d0D39996Df797457B4EDB376BA7b3
(node:5694) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xaee8c44bd472e66632cdf7e7cd01dee4fd18d05651808fc1e86514c43f10d7aa",
  "blockHash": "0x3cdb9f8069194b24b2938808992e4ec32fc3cbeb162b2ed8c5f29b113fbbf7e9",
  "blockNumber": 88,
  "address": "0x79442E716a5d0D39996Df797457B4EDB376BA7b3",
  "type": "mined",
  "id": "log_19ed1381",
  "returnValues": {
    "0": "0xd0304eebb0c3b08787fe5b9e735c1a7fe03ceb2966a2ea06a1394d047adeceea",
    "1": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0xd0304eebb0c3b08787fe5b9e735c1a7fe03ceb2966a2ea06a1394d047adeceea",
    "recipient": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xd0304eebb0c3b08787fe5b9e735c1a7fe03ceb2966a2ea06a1394d047adeceea000000000000000000000000c908d662d0ccdec6df171eefee31dc9710fced9800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xe1babf4764aecd8976ab4bb496f2054547c997c77997b90d4105c54908826837",
  "blockHash": "0x70fd060c5a78ccd53b849d3626ff5af7ec690c69b4e3f0f0081c39c612de6f51",
  "blockNumber": 95,
  "address": "0x79442E716a5d0D39996Df797457B4EDB376BA7b3",
  "type": "mined",
  "id": "log_e0d1b21b",
  "returnValues": {
    "0": "0xe10f0b52d6c59117ca606dc9546e400b2b2f1e6a1f0621ddf4566f250a84a048",
    "1": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0xe10f0b52d6c59117ca606dc9546e400b2b2f1e6a1f0621ddf4566f250a84a048",
    "recipient": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xe10f0b52d6c59117ca606dc9546e400b2b2f1e6a1f0621ddf4566f250a84a048000000000000000000000000c908d662d0ccdec6df171eefee31dc9710fced9800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x38feef3cc3f8c582be4ff7bdd43cd4efb5e13b70620f8b2496930acbd5aa31d4",
  "blockHash": "0x7634a4364c9c4972aa456e7e38f613479b6cc7a94f8f56f37f9766a863c476d0",
  "blockNumber": 102,
  "address": "0x79442E716a5d0D39996Df797457B4EDB376BA7b3",
  "type": "mined",
  "id": "log_8548de12",
  "returnValues": {
    "0": "0x444726eb36e3c61dcb0136efb18cfe6b5d4d102e4f82a016877ef40a3cea61fe",
    "1": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x444726eb36e3c61dcb0136efb18cfe6b5d4d102e4f82a016877ef40a3cea61fe",
    "recipient": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x444726eb36e3c61dcb0136efb18cfe6b5d4d102e4f82a016877ef40a3cea61fe000000000000000000000000c908d662d0ccdec6df171eefee31dc9710fced9800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x38feef3cc3f8c582be4ff7bdd43cd4efb5e13b70620f8b2496930acbd5aa31d4",
  "blockHash": "0x7634a4364c9c4972aa456e7e38f613479b6cc7a94f8f56f37f9766a863c476d0",
  "blockNumber": 102,
  "address": "0x79442E716a5d0D39996Df797457B4EDB376BA7b3",
  "type": "mined",
  "id": "log_e66841d0",
  "returnValues": {
    "0": "0x8ee03a6bb3b73de26b54a3a4c1de5ea5689d7c4e698fc547ea0ecbe679feb54b",
    "1": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x8ee03a6bb3b73de26b54a3a4c1de5ea5689d7c4e698fc547ea0ecbe679feb54b",
    "recipient": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x8ee03a6bb3b73de26b54a3a4c1de5ea5689d7c4e698fc547ea0ecbe679feb54b000000000000000000000000c908d662d0ccdec6df171eefee31dc9710fced9800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x38feef3cc3f8c582be4ff7bdd43cd4efb5e13b70620f8b2496930acbd5aa31d4",
  "blockHash": "0x7634a4364c9c4972aa456e7e38f613479b6cc7a94f8f56f37f9766a863c476d0",
  "blockNumber": 102,
  "address": "0x79442E716a5d0D39996Df797457B4EDB376BA7b3",
  "type": "mined",
  "id": "log_f302d72f",
  "returnValues": {
    "0": "0x1373d1f40554fa40d7ce657fd822ebb48e7831070a316df85050b1fa0ea5f62f",
    "1": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x1373d1f40554fa40d7ce657fd822ebb48e7831070a316df85050b1fa0ea5f62f",
    "recipient": "0xc908d662d0cCDec6Df171eefee31Dc9710Fced98",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x1373d1f40554fa40d7ce657fd822ebb48e7831070a316df85050b1fa0ea5f62f000000000000000000000000c908d662d0ccdec6df171eefee31dc9710fced9800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 16 64 2c 1d>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 16 64 2c 1d>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'IkdUVzidMqE0VCvcVgROVg=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'S4088y8kom4fhZrQSxmXaAlBnD0='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'S4088y8kom4fhZrQSxmXaAlBnD0='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xA47461c4d3186AeBAc33380D9cB93d1C684A13F0
starting event monitoring on contract: 0x703E4a495b65528269717ACfB54C52e5acc4fB8F
(node:6801) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xa3e1ccc6dfab3965fa63e3ffce7b4e6f53478c8933921f438122c5bf9b057cc6",
  "blockHash": "0xdfd85e6a2ebf3caaed8390f07aab5da6a8d22147ce9796ca2fbb05bd0a3addc8",
  "blockNumber": 136,
  "address": "0x703E4a495b65528269717ACfB54C52e5acc4fB8F",
  "type": "mined",
  "id": "log_3639f462",
  "returnValues": {
    "0": "0x8ee81ded0fac7aca477709cf8727b088abf1d8dd1d139d81f043b7ae95a2eae4",
    "1": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x8ee81ded0fac7aca477709cf8727b088abf1d8dd1d139d81f043b7ae95a2eae4",
    "recipient": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x8ee81ded0fac7aca477709cf8727b088abf1d8dd1d139d81f043b7ae95a2eae400000000000000000000000087565026f1bc65eb300145009c5daf3d62af658500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x1567deeedd13e191b44bf0642423d7998e741f2f057707b3e2f1e3066598ce17",
  "blockHash": "0x20b6b01f74e43f26d8029090c80478e171791279724be0e8850764467f59886d",
  "blockNumber": 143,
  "address": "0x703E4a495b65528269717ACfB54C52e5acc4fB8F",
  "type": "mined",
  "id": "log_e6700cb8",
  "returnValues": {
    "0": "0x1ce6ed0643432232b079bc7cd4c2439677b1dcbc255f97e0c200322a68d5c413",
    "1": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x1ce6ed0643432232b079bc7cd4c2439677b1dcbc255f97e0c200322a68d5c413",
    "recipient": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x1ce6ed0643432232b079bc7cd4c2439677b1dcbc255f97e0c200322a68d5c41300000000000000000000000087565026f1bc65eb300145009c5daf3d62af658500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x193d21c90a1bc4794f07b9642bc19ccc96cf69df2980d58b9002e5f878cfffc0",
  "blockHash": "0x3a08837e63cbc8f25fa262eab471a8e5508241dbe9c2f0d9b4eb9c9771d2f12b",
  "blockNumber": 150,
  "address": "0x703E4a495b65528269717ACfB54C52e5acc4fB8F",
  "type": "mined",
  "id": "log_6d1c2d9c",
  "returnValues": {
    "0": "0xa9bbcf4e10e4e3cccafffb71591a7bc33857ca49acb146bb06a9e5bc4495294d",
    "1": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0xa9bbcf4e10e4e3cccafffb71591a7bc33857ca49acb146bb06a9e5bc4495294d",
    "recipient": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xa9bbcf4e10e4e3cccafffb71591a7bc33857ca49acb146bb06a9e5bc4495294d00000000000000000000000087565026f1bc65eb300145009c5daf3d62af658500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x193d21c90a1bc4794f07b9642bc19ccc96cf69df2980d58b9002e5f878cfffc0",
  "blockHash": "0x3a08837e63cbc8f25fa262eab471a8e5508241dbe9c2f0d9b4eb9c9771d2f12b",
  "blockNumber": 150,
  "address": "0x703E4a495b65528269717ACfB54C52e5acc4fB8F",
  "type": "mined",
  "id": "log_9abf1801",
  "returnValues": {
    "0": "0x04ce50869a68c5f73d2d970a5e5e65b528d917877cc8138568608301f7ebcb2d",
    "1": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x04ce50869a68c5f73d2d970a5e5e65b528d917877cc8138568608301f7ebcb2d",
    "recipient": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x04ce50869a68c5f73d2d970a5e5e65b528d917877cc8138568608301f7ebcb2d00000000000000000000000087565026f1bc65eb300145009c5daf3d62af658500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x193d21c90a1bc4794f07b9642bc19ccc96cf69df2980d58b9002e5f878cfffc0",
  "blockHash": "0x3a08837e63cbc8f25fa262eab471a8e5508241dbe9c2f0d9b4eb9c9771d2f12b",
  "blockNumber": 150,
  "address": "0x703E4a495b65528269717ACfB54C52e5acc4fB8F",
  "type": "mined",
  "id": "log_4e12fa45",
  "returnValues": {
    "0": "0xffec53bc8e51a28680a9a34ec2b59d518d8725003fd73f907ed177ace930936b",
    "1": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0xffec53bc8e51a28680a9a34ec2b59d518d8725003fd73f907ed177ace930936b",
    "recipient": "0x87565026F1bC65EB300145009C5DAf3d62AF6585",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xffec53bc8e51a28680a9a34ec2b59d518d8725003fd73f907ed177ace930936b00000000000000000000000087565026f1bc65eb300145009c5daf3d62af658500000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 16 d4 5e fc>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 16 d4 5e fc>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'SOQEDN31I5F7e2s4TfZsAw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'wV9qr2OrwwXHk3dY7fd6yndcuqk='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'wV9qr2OrwwXHk3dY7fd6yndcuqk='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x1AEA430B19dcA50307E1624bC6caf30875C2F23f
(node:11671) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer c4 7d 1d 87>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer c4 7d 1d 87>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'+ls2j8pOetfLOGkfsXpjaw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'73O2Dh4GkThZI4CVt/kd7kuRxHo='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'73O2Dh4GkThZI4CVt/kd7kuRxHo='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x1AEA430B19dcA50307E1624bC6caf30875C2F23f
(node:12330) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xb5d7dbd03cff61097f69c41cadc2d6d89cf2d93691b13f62ffbfa9c08d3e691c",
  "blockHash": "0x1f2ce7f7d6c9921c04f37db5b4cf0ce03a16c2d7edf91b00cbe0b84b997f49ad",
  "blockNumber": 31,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_84f6820e",
  "returnValues": {
    "0": "0x688cf393179fdb5bed9d776165f4ff37db2e99a8ccbe7d1649647d822604e8d5",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x688cf393179fdb5bed9d776165f4ff37db2e99a8ccbe7d1649647d822604e8d5",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x688cf393179fdb5bed9d776165f4ff37db2e99a8ccbe7d1649647d822604e8d500000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x1f868331f66eac2790a3b891b0c0b672f3f1a7763dc77a9415c3985b5b4a3fd8",
  "blockHash": "0xf5ddeedb1196d4ab0cb198f44db972a31b84b2e7d6210288a950eef2c01e29b4",
  "blockNumber": 38,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_f605d5d9",
  "returnValues": {
    "0": "0x77ca60aaae1dbedb6ed8e30615d63cd83c05f9b16a050e3540980adfde30f9dd",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x77ca60aaae1dbedb6ed8e30615d63cd83c05f9b16a050e3540980adfde30f9dd",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x77ca60aaae1dbedb6ed8e30615d63cd83c05f9b16a050e3540980adfde30f9dd00000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x773f54bd826da9278110bef9c129b84c8ffcd1be01fca6b088f6a95c8812b6f2",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_a7c1f186",
  "returnValues": {
    "0": "0x96420faaddbf5e5cd5c634e71d65804926587a27b6ab301533ed0a695eb2a3f4",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x96420faaddbf5e5cd5c634e71d65804926587a27b6ab301533ed0a695eb2a3f4",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x96420faaddbf5e5cd5c634e71d65804926587a27b6ab301533ed0a695eb2a3f400000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x773f54bd826da9278110bef9c129b84c8ffcd1be01fca6b088f6a95c8812b6f2",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_8361c507",
  "returnValues": {
    "0": "0xa5eec669c548ddeca0102c5297551aa5553199762cc79425fc89f988ac68dbc2",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0xa5eec669c548ddeca0102c5297551aa5553199762cc79425fc89f988ac68dbc2",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xa5eec669c548ddeca0102c5297551aa5553199762cc79425fc89f988ac68dbc200000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x773f54bd826da9278110bef9c129b84c8ffcd1be01fca6b088f6a95c8812b6f2",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_048dcec5",
  "returnValues": {
    "0": "0xabd6d8cf4a98151c9180669791b57c68ac3868890a36c17d9b9b5118f51e4e1a",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0xabd6d8cf4a98151c9180669791b57c68ac3868890a36c17d9b9b5118f51e4e1a",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xabd6d8cf4a98151c9180669791b57c68ac3868890a36c17d9b9b5118f51e4e1a00000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 72 e9 9b 64>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 72 e9 9b 64>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'g3S15IyZpxS1AFKkQj1zNA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'Yw7lNeVrgYrBNq8XVjdPlb4B/bY='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'Yw7lNeVrgYrBNq8XVjdPlb4B/bY='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20
(node:12640) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x5ce84583fa7a0f2c2bbe8723e02eda35bbe3fb8df6e43c1796eea25d53c8b758",
  "blockHash": "0x0b777ca7be5c3ba80fa841d78f33611da919c036b448a57884b0a7806f306b9e",
  "blockNumber": 66,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_d11dc171",
  "returnValues": {
    "0": "0x9aa99460379123c876f089a174811d1688c71eff28c9f2dcb84b49d848f005da",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x9aa99460379123c876f089a174811d1688c71eff28c9f2dcb84b49d848f005da",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x9aa99460379123c876f089a174811d1688c71eff28c9f2dcb84b49d848f005da0000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xc286182827cfaffa2874c19e920176648a500cdec17e947d01e194f7dd5aec7a",
  "blockHash": "0x15d34b6cfcdd9c1905b99e3d8622fc187cd3f36c5e425af94c454fef09a5ddfc",
  "blockNumber": 73,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_a01d2ba4",
  "returnValues": {
    "0": "0x47666e424de33d762007dc384b291a3a2359a16d78c31513e6f4cd528b53d32f",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x47666e424de33d762007dc384b291a3a2359a16d78c31513e6f4cd528b53d32f",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x47666e424de33d762007dc384b291a3a2359a16d78c31513e6f4cd528b53d32f0000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
Aqui llegó
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x69ac710d398496b28a39c7f08424390d7609da4e15ab180a57cf6e471015aba4",
  "blockHash": "0x6014b533596a49c0d86308a9abc6861357953b6bb0cf6082dee188256fce6d72",
  "blockNumber": 80,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_eeebbfad",
  "returnValues": {
    "0": "0xca605eb299c16873de87ccc840409e1f957ba12484fa958e65b388124e304376",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0xca605eb299c16873de87ccc840409e1f957ba12484fa958e65b388124e304376",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xca605eb299c16873de87ccc840409e1f957ba12484fa958e65b388124e3043760000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x69ac710d398496b28a39c7f08424390d7609da4e15ab180a57cf6e471015aba4",
  "blockHash": "0x6014b533596a49c0d86308a9abc6861357953b6bb0cf6082dee188256fce6d72",
  "blockNumber": 80,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_a770eb0f",
  "returnValues": {
    "0": "0x902c01d8e71d6aebc8d4c591dbb367626f036fe19b2e7f1dc1fe76b53969e860",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x902c01d8e71d6aebc8d4c591dbb367626f036fe19b2e7f1dc1fe76b53969e860",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x902c01d8e71d6aebc8d4c591dbb367626f036fe19b2e7f1dc1fe76b53969e8600000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x69ac710d398496b28a39c7f08424390d7609da4e15ab180a57cf6e471015aba4",
  "blockHash": "0x6014b533596a49c0d86308a9abc6861357953b6bb0cf6082dee188256fce6d72",
  "blockNumber": 80,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_ec04aeb2",
  "returnValues": {
    "0": "0xfd26d555e5214f9a9313091987ab4fbfd071e07ce27cbc7b79804cbd23c743d0",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0xfd26d555e5214f9a9313091987ab4fbfd071e07ce27cbc7b79804cbd23c743d0",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xfd26d555e5214f9a9313091987ab4fbfd071e07ce27cbc7b79804cbd23c743d00000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 8f 90 17 99>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 8f 90 17 99>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'grJRyclROdowmLiCnqZDpA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'PDCKCiXznghgkRH0EPGeLDU/ebc='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'PDCKCiXznghgkRH0EPGeLDU/ebc='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0xCA6CF0581103eE3132F343c7bf0238b6d460A2d6
(node:13440) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
error: Error: Invalid protocol: localhost:
/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:72
            console.log("status code: " + response.statusCode)
                                                   ^

TypeError: Cannot read property 'statusCode' of undefined
    at Request._callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:72:52)
    at self.callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:185:22)
    at Request.emit (events.js:182:13)
    at Request.init (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:458:17)
    at new Request (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:127:8)
    at request (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/index.js:53:10)
    at MonitorHandler.monitor_fake (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:69:9)
    at ForwardingHandler.handle (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/ForwardingHandler.js:24:29)
    at Subscription.myContract.events.Incoming.on (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/oracle.js:94:21)
    at Subscription.emit (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/eventemitter3/index.js:89:35)
    at Subscription.subscriptionHandler (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-eth-contract/src/index.js:623:26)
    at Object.callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-core-subscriptions/src/subscription.js:266:79)
    at requestManagerNotification (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-core-requestmanager/src/index.js:101:69)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:71:25
    at Array.forEach (<anonymous>)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:69:45
    at Array.forEach (<anonymous>)
    at W3CWebSocket.WebsocketProvider.connection.onmessage (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:53:36)
    at W3CWebSocket._dispatchEvent [as dispatchEvent] (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/yaeti/lib/EventTarget.js:107:17)
    at W3CWebSocket.onMessage (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:234:14)
    at WebSocketConnection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:205:19)
    at WebSocketConnection.emit (events.js:182:13)
    at WebSocketConnection.processFrame (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/WebSocketConnection.js:552:26)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/WebSocketConnection.js:321:40
    at process.internalTickCallback (internal/process/next_tick.js:70:11)
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 21 f0 8e ee>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 21 f0 8e ee>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'wSJTAeEzSieB5wVvlEZ0MA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'7LiiYLu7dSbFGW4Mq2D76FUJ4Ok='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'7LiiYLu7dSbFGW4Mq2D76FUJ4Ok='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x2351a9b5864bD3a339672AE180BD1050AB703dEF
(node:13552) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 11 53 13 86>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 11 53 13 86>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'BguMRn8V7q7GZAEH/iYJVQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'm2+74Oi/cHRjX0u9Kk7bZ5Y9GcQ='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'm2+74Oi/cHRjX0u9Kk7bZ5Y9GcQ='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x0cd89B60eF2CCaDAaa55f0195D7AE9c7Eb1621E1
(node:13758) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
error: Error: Invalid protocol: localhost:
/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:72
            console.log("status code: " + response.statusCode)
                                                   ^

TypeError: Cannot read property 'statusCode' of undefined
    at Request._callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:72:52)
    at self.callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:185:22)
    at Request.emit (events.js:182:13)
    at Request.init (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:458:17)
    at new Request (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:127:8)
    at request (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/index.js:53:10)
    at MonitorHandler.monitor_fake (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:69:9)
    at ForwardingHandler.handle (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/ForwardingHandler.js:24:29)
    at Subscription.myContract.events.Incoming.on (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/oracle.js:94:21)
    at Subscription.emit (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/eventemitter3/index.js:89:35)
    at Subscription.subscriptionHandler (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-eth-contract/src/index.js:623:26)
    at Object.callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-core-subscriptions/src/subscription.js:266:79)
    at requestManagerNotification (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-core-requestmanager/src/index.js:101:69)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:71:25
    at Array.forEach (<anonymous>)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:69:45
    at Array.forEach (<anonymous>)
    at W3CWebSocket.WebsocketProvider.connection.onmessage (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:53:36)
    at W3CWebSocket._dispatchEvent [as dispatchEvent] (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/yaeti/lib/EventTarget.js:107:17)
    at W3CWebSocket.onMessage (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:234:14)
    at WebSocketConnection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:205:19)
    at WebSocketConnection.emit (events.js:182:13)
    at WebSocketConnection.processFrame (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/WebSocketConnection.js:552:26)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/WebSocketConnection.js:321:40
    at process.internalTickCallback (internal/process/next_tick.js:70:11)
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 5e 65 ce 51>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 5e 65 ce 51>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'63LzApIRQjeEHJVdlRhILw=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'UIl6yguJ7LEvW/v0k5NIA6SceZ0='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'UIl6yguJ7LEvW/v0k5NIA6SceZ0='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0xA229065D1849A1Be23245B3f4Ff85B579AD07c2e
(node:13924) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
localhost:3000
error: Error: Invalid protocol: localhost:
/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:73
            console.log("status code: " + response.statusCode)
                                                   ^

TypeError: Cannot read property 'statusCode' of undefined
    at Request._callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:73:52)
    at self.callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:185:22)
    at Request.emit (events.js:182:13)
    at Request.init (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:458:17)
    at new Request (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/request.js:127:8)
    at request (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/request/index.js:53:10)
    at MonitorHandler.monitor_fake (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/MonitorHandler.js:70:9)
    at ForwardingHandler.handle (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/ForwardingHandler.js:24:29)
    at Subscription.myContract.events.Incoming.on (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/oracle/oracle.js:94:21)
    at Subscription.emit (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/eventemitter3/index.js:89:35)
    at Subscription.subscriptionHandler (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-eth-contract/src/index.js:623:26)
    at Object.callback (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-core-subscriptions/src/subscription.js:266:79)
    at requestManagerNotification (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-core-requestmanager/src/index.js:101:69)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:71:25
    at Array.forEach (<anonymous>)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:69:45
    at Array.forEach (<anonymous>)
    at W3CWebSocket.WebsocketProvider.connection.onmessage (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/src/index.js:53:36)
    at W3CWebSocket._dispatchEvent [as dispatchEvent] (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/yaeti/lib/EventTarget.js:107:17)
    at W3CWebSocket.onMessage (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:234:14)
    at WebSocketConnection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/W3CWebSocket.js:205:19)
    at WebSocketConnection.emit (events.js:182:13)
    at WebSocketConnection.processFrame (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/WebSocketConnection.js:552:26)
    at /home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/web3-providers-ws/node_modules/websocket/lib/WebSocketConnection.js:321:40
    at process.internalTickCallback (internal/process/next_tick.js:70:11)
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 7f 63 69 d0>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 7f 63 69 d0>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'ibpD33TO7dOeEp5w4wq4YQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'cfJgWhJkMFxftG6LkJtYkodOf3Q='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'cfJgWhJkMFxftG6LkJtYkodOf3Q='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x1cCA96c1d50AA31c8d4490020Bb976b0A0e0006A
(node:14316) UnhandledPromiseRejectionWarning: MongoNetworkError: failed to connect to server [http:27017] on first connect [MongoNetworkError: getaddrinfo ENOTFOUND http http:27017]
    at Pool.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/topologies/server.js:564:11)
    at Pool.emit (events.js:182:13)
    at Connection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/pool.js:317:12)
    at Object.onceWrapper (events.js:273:13)
    at Connection.emit (events.js:182:13)
    at Socket.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/connection.js:246:50)
    at Object.onceWrapper (events.js:273:13)
    at Socket.emit (events.js:182:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
(node:14316) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:14316) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0xd9dfc4cd91601b497cf0a1e05ad79ee70ad4f0247fdbdb928796c126fc0badcf",
  "blockHash": "0x2e34cb8db2e2e74d8473167984931d65b3db4ec36b5f3d0798e891d53d5ba1cc",
  "blockNumber": 165,
  "address": "0x1cCA96c1d50AA31c8d4490020Bb976b0A0e0006A",
  "type": "mined",
  "id": "log_fa4248a3",
  "returnValues": {
    "0": "0x87000aca2501cc161788a7a0fcef280f3c5fd546d182d9c3320406f8576e8297",
    "1": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x87000aca2501cc161788a7a0fcef280f3c5fd546d182d9c3320406f8576e8297",
    "recipient": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x87000aca2501cc161788a7a0fcef280f3c5fd546d182d9c3320406f8576e8297000000000000000000000000d558e5e73706b7d90ad8ef22fdce06e1618b7a9d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x396253e8b8bee28657bc9b5bbca6059824ba7c542b5a91c9989067b2ad927525",
  "blockHash": "0x5f08ef6f2c86574e6f2fcaea0c7991d43b0f21fa4f7dbf52309abee12ef826b4",
  "blockNumber": 172,
  "address": "0x1cCA96c1d50AA31c8d4490020Bb976b0A0e0006A",
  "type": "mined",
  "id": "log_504f6280",
  "returnValues": {
    "0": "0x4e4ffca365dc253c5b4469d3bd2ac882704d6ede5339d1d8bda7ca543b7c0e2e",
    "1": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x4e4ffca365dc253c5b4469d3bd2ac882704d6ede5339d1d8bda7ca543b7c0e2e",
    "recipient": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x4e4ffca365dc253c5b4469d3bd2ac882704d6ede5339d1d8bda7ca543b7c0e2e000000000000000000000000d558e5e73706b7d90ad8ef22fdce06e1618b7a9d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x6de04b2edd25c81d469574de0c8e91543824800ae297e447e447bbe83b2ab71a",
  "blockHash": "0x6ac2d95faa8bc67824c1d26b10593a400528c1a4b231a1719d38cae5d0f17fc1",
  "blockNumber": 179,
  "address": "0x1cCA96c1d50AA31c8d4490020Bb976b0A0e0006A",
  "type": "mined",
  "id": "log_79e831f2",
  "returnValues": {
    "0": "0xd21681902e0b69072cb4506eb7ee5c739aeaa02ceb5a0da1ac5a6aeaf0b95fee",
    "1": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0xd21681902e0b69072cb4506eb7ee5c739aeaa02ceb5a0da1ac5a6aeaf0b95fee",
    "recipient": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xd21681902e0b69072cb4506eb7ee5c739aeaa02ceb5a0da1ac5a6aeaf0b95fee000000000000000000000000d558e5e73706b7d90ad8ef22fdce06e1618b7a9d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x6de04b2edd25c81d469574de0c8e91543824800ae297e447e447bbe83b2ab71a",
  "blockHash": "0x6ac2d95faa8bc67824c1d26b10593a400528c1a4b231a1719d38cae5d0f17fc1",
  "blockNumber": 179,
  "address": "0x1cCA96c1d50AA31c8d4490020Bb976b0A0e0006A",
  "type": "mined",
  "id": "log_38dd19af",
  "returnValues": {
    "0": "0x7a5ca69f4ebed5b734114ea926453ef8ff1c5149d7ed7ff12fd250f7c17c1818",
    "1": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x7a5ca69f4ebed5b734114ea926453ef8ff1c5149d7ed7ff12fd250f7c17c1818",
    "recipient": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x7a5ca69f4ebed5b734114ea926453ef8ff1c5149d7ed7ff12fd250f7c17c1818000000000000000000000000d558e5e73706b7d90ad8ef22fdce06e1618b7a9d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x6de04b2edd25c81d469574de0c8e91543824800ae297e447e447bbe83b2ab71a",
  "blockHash": "0x6ac2d95faa8bc67824c1d26b10593a400528c1a4b231a1719d38cae5d0f17fc1",
  "blockNumber": 179,
  "address": "0x1cCA96c1d50AA31c8d4490020Bb976b0A0e0006A",
  "type": "mined",
  "id": "log_56372f17",
  "returnValues": {
    "0": "0xc05b737630aba92f755146d7138bacf1e6692ae83ea0bfb3f49c3e7f3068288a",
    "1": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0xc05b737630aba92f755146d7138bacf1e6692ae83ea0bfb3f49c3e7f3068288a",
    "recipient": "0xD558e5e73706b7d90Ad8ef22FDce06e1618b7a9D",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xc05b737630aba92f755146d7138bacf1e6692ae83ea0bfb3f49c3e7f3068288a000000000000000000000000d558e5e73706b7d90ad8ef22fdce06e1618b7a9d00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer ca 75 84 7c>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer ca 75 84 7c>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'GLMjZZeGRoLvkKrMLwBiaQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'pgwKxU6wG0l4vxXzTLMp3cOAllI='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'pgwKxU6wG0l4vxXzTLMp3cOAllI='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x009F512C500180367d0D7950296D7a9DE45d4e7B
(node:14405) UnhandledPromiseRejectionWarning: MongoNetworkError: failed to connect to server [http:27017] on first connect [MongoNetworkError: getaddrinfo ENOTFOUND http http:27017]
    at Pool.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/topologies/server.js:564:11)
    at Pool.emit (events.js:182:13)
    at Connection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/pool.js:317:12)
    at Object.onceWrapper (events.js:273:13)
    at Connection.emit (events.js:182:13)
    at Socket.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/connection.js:246:50)
    at Object.onceWrapper (events.js:273:13)
    at Socket.emit (events.js:182:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
(node:14405) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:14405) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x3a584cc1eb948e1d2963a488571c3d2aba52f56d2ec12facfa6b2a32ebf7bff2",
  "blockHash": "0x22e04feb06bc77faee21ead4fceb0a2c3dddcaccb7f9ab746bea97e1210cfe02",
  "blockNumber": 200,
  "address": "0x009F512C500180367d0D7950296D7a9DE45d4e7B",
  "type": "mined",
  "id": "log_25c2d97c",
  "returnValues": {
    "0": "0x65ceed6197de3a317a3af0eaddd8893623309a35372c100d7a299922e0f3ffc5",
    "1": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x65ceed6197de3a317a3af0eaddd8893623309a35372c100d7a299922e0f3ffc5",
    "recipient": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x65ceed6197de3a317a3af0eaddd8893623309a35372c100d7a299922e0f3ffc5000000000000000000000000c89b241f4c966886e174dd8d9c509a681ac7db5900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 4,
  "transactionIndex": 0,
  "transactionHash": "0x6ffbd99054395a198d85293ca7999e136a4ad7e478841272132d73a1393fdb8b",
  "blockHash": "0x3e0d97bbedadd977daa9511d14ddac8846298fbf9b08c1621f7b5d20a1453711",
  "blockNumber": 207,
  "address": "0x009F512C500180367d0D7950296D7a9DE45d4e7B",
  "type": "mined",
  "id": "log_c08a4ba6",
  "returnValues": {
    "0": "0x22a3e80481527b9a444ab7b2e7b5827a6cdb1f2b7b3a4dc52f7b05a2521acbbd",
    "1": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x22a3e80481527b9a444ab7b2e7b5827a6cdb1f2b7b3a4dc52f7b05a2521acbbd",
    "recipient": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x22a3e80481527b9a444ab7b2e7b5827a6cdb1f2b7b3a4dc52f7b05a2521acbbd000000000000000000000000c89b241f4c966886e174dd8d9c509a681ac7db5900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x11cccff3b7d25bd3a2b9737e9c254a85b4922c8c6398e49be1032cca1f2aae96",
  "blockHash": "0x51f01faf95f37c4746a32d87331a03dedb0031e7157d25c9f9083e48085e5708",
  "blockNumber": 214,
  "address": "0x009F512C500180367d0D7950296D7a9DE45d4e7B",
  "type": "mined",
  "id": "log_6a83c77e",
  "returnValues": {
    "0": "0x7c4d7194c4f87418b358c406d09cf6c86978f6bb7f93f96ae58858acc08d2c73",
    "1": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x7c4d7194c4f87418b358c406d09cf6c86978f6bb7f93f96ae58858acc08d2c73",
    "recipient": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x7c4d7194c4f87418b358c406d09cf6c86978f6bb7f93f96ae58858acc08d2c73000000000000000000000000c89b241f4c966886e174dd8d9c509a681ac7db5900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x11cccff3b7d25bd3a2b9737e9c254a85b4922c8c6398e49be1032cca1f2aae96",
  "blockHash": "0x51f01faf95f37c4746a32d87331a03dedb0031e7157d25c9f9083e48085e5708",
  "blockNumber": 214,
  "address": "0x009F512C500180367d0D7950296D7a9DE45d4e7B",
  "type": "mined",
  "id": "log_a2dbd5b8",
  "returnValues": {
    "0": "0x96cc31056467a57c17f6f16e7a9b256c7871fd19735064c7d2ee7df1872b054d",
    "1": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x96cc31056467a57c17f6f16e7a9b256c7871fd19735064c7d2ee7df1872b054d",
    "recipient": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x96cc31056467a57c17f6f16e7a9b256c7871fd19735064c7d2ee7df1872b054d000000000000000000000000c89b241f4c966886e174dd8d9c509a681ac7db5900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x11cccff3b7d25bd3a2b9737e9c254a85b4922c8c6398e49be1032cca1f2aae96",
  "blockHash": "0x51f01faf95f37c4746a32d87331a03dedb0031e7157d25c9f9083e48085e5708",
  "blockNumber": 214,
  "address": "0x009F512C500180367d0D7950296D7a9DE45d4e7B",
  "type": "mined",
  "id": "log_a6018f9e",
  "returnValues": {
    "0": "0x9844432495480b02fce705c30cf9bc9de2ff8e660345c4fc1227688eac5959e5",
    "1": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x9844432495480b02fce705c30cf9bc9de2ff8e660345c4fc1227688eac5959e5",
    "recipient": "0xc89B241F4c966886e174dd8d9c509a681Ac7DB59",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x9844432495480b02fce705c30cf9bc9de2ff8e660345c4fc1227688eac5959e5000000000000000000000000c89b241f4c966886e174dd8d9c509a681ac7db5900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer ec f6 e4 ad>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer ec f6 e4 ad>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'zhR7JuLX1+4LnjpeN8GbYA=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'qwyRVqv9jL3NmA7EGwkHv/uZ6eU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'qwyRVqv9jL3NmA7EGwkHv/uZ6eU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x1AEA430B19dcA50307E1624bC6caf30875C2F23f
(node:18039) UnhandledPromiseRejectionWarning: MongoNetworkError: failed to connect to server [http:27017] on first connect [MongoNetworkError: getaddrinfo ENOTFOUND http http:27017]
    at Pool.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/topologies/server.js:564:11)
    at Pool.emit (events.js:182:13)
    at Connection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/pool.js:317:12)
    at Object.onceWrapper (events.js:273:13)
    at Connection.emit (events.js:182:13)
    at Socket.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/connection.js:246:50)
    at Object.onceWrapper (events.js:273:13)
    at Socket.emit (events.js:182:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
(node:18039) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:18039) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xb5d7dbd03cff61097f69c41cadc2d6d89cf2d93691b13f62ffbfa9c08d3e691c",
  "blockHash": "0x8613bbb256bd2cbf5bf5397e708f3255424d6a7ded3a98c1fc5fea3164e67c47",
  "blockNumber": 31,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_9d988a70",
  "returnValues": {
    "0": "0xd0e1098025ce664340c52d5b34561757137688c20b16e851557a1833112337bd",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0xd0e1098025ce664340c52d5b34561757137688c20b16e851557a1833112337bd",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xd0e1098025ce664340c52d5b34561757137688c20b16e851557a1833112337bd00000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x1f868331f66eac2790a3b891b0c0b672f3f1a7763dc77a9415c3985b5b4a3fd8",
  "blockHash": "0x5f26af2a91cb818cc3b0d4075aa4a78e487111a63bff5a7d7ed3595099c2b849",
  "blockNumber": 38,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_0fa195e4",
  "returnValues": {
    "0": "0xc4eb8605b80bc5b6c55f3bfd1698febf3704b14c3962c16794a61f6693153d8b",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0xc4eb8605b80bc5b6c55f3bfd1698febf3704b14c3962c16794a61f6693153d8b",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0xc4eb8605b80bc5b6c55f3bfd1698febf3704b14c3962c16794a61f6693153d8b00000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x147adc8d36a1905c5769e24813bda5fdf3339b291f0f82cb51d318bff4f69433",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_34fcba9c",
  "returnValues": {
    "0": "0x6b21f4581121843b2a7a08bdf8b420f0ed7aaac7b88fb296242d1a83f8387a07",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x6b21f4581121843b2a7a08bdf8b420f0ed7aaac7b88fb296242d1a83f8387a07",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x6b21f4581121843b2a7a08bdf8b420f0ed7aaac7b88fb296242d1a83f8387a0700000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x147adc8d36a1905c5769e24813bda5fdf3339b291f0f82cb51d318bff4f69433",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_7f2dd78f",
  "returnValues": {
    "0": "0x5a25352a5275676be0a4142a1ff88d34c17cd70620ebb2bca0fe5851f9a1a11b",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x5a25352a5275676be0a4142a1ff88d34c17cd70620ebb2bca0fe5851f9a1a11b",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x5a25352a5275676be0a4142a1ff88d34c17cd70620ebb2bca0fe5851f9a1a11b00000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x147adc8d36a1905c5769e24813bda5fdf3339b291f0f82cb51d318bff4f69433",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_7e8ff7a5",
  "returnValues": {
    "0": "0x60117487efdc75c812abfff49a1b2a1e8e61b3a66420f9b021a63d28a15c34cd",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x60117487efdc75c812abfff49a1b2a1e8e61b3a66420f9b021a63d28a15c34cd",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x60117487efdc75c812abfff49a1b2a1e8e61b3a66420f9b021a63d28a15c34cd00000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer f7 9a cd 6d>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer f7 9a cd 6d>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'ukKgtE8s8EPoaqaMDutD9Q=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'NnLKeP7mhH4yVcsX7Y09/nKwcIU='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'NnLKeP7mhH4yVcsX7Y09/nKwcIU='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20
(node:18333) UnhandledPromiseRejectionWarning: MongoNetworkError: failed to connect to server [http:27017] on first connect [MongoNetworkError: getaddrinfo ENOTFOUND http http:27017]
    at Pool.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/topologies/server.js:564:11)
    at Pool.emit (events.js:182:13)
    at Connection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/pool.js:317:12)
    at Object.onceWrapper (events.js:273:13)
    at Connection.emit (events.js:182:13)
    at Socket.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/connection.js:246:50)
    at Object.onceWrapper (events.js:273:13)
    at Socket.emit (events.js:182:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
(node:18333) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:18333) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x5ce84583fa7a0f2c2bbe8723e02eda35bbe3fb8df6e43c1796eea25d53c8b758",
  "blockHash": "0x830e8de80cebfb79385dbd6e273cb83107345036f676505f348f37f2a9fc62f4",
  "blockNumber": 66,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_2091d051",
  "returnValues": {
    "0": "0x709916df3f0e0e65ead0f2029c416a2b5f5e19ec2b5276df978a1fbd15e7a27f",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x709916df3f0e0e65ead0f2029c416a2b5f5e19ec2b5276df978a1fbd15e7a27f",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x709916df3f0e0e65ead0f2029c416a2b5f5e19ec2b5276df978a1fbd15e7a27f0000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xc286182827cfaffa2874c19e920176648a500cdec17e947d01e194f7dd5aec7a",
  "blockHash": "0x3897ba10bae4b67acfd70d17a17efdbee845e1ea0f7a47cdad7ff4db045c7b4e",
  "blockNumber": 73,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_4867ea49",
  "returnValues": {
    "0": "0x83ec7a7c27a3b2810d9e91dea3aa370a44e698b591c60a8dcd1a2da5a9d83472",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x83ec7a7c27a3b2810d9e91dea3aa370a44e698b591c60a8dcd1a2da5a9d83472",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x83ec7a7c27a3b2810d9e91dea3aa370a44e698b591c60a8dcd1a2da5a9d834720000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
http://localhost:3000
http://localhost:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://localhost:3000
http://localhost:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x69ac710d398496b28a39c7f08424390d7609da4e15ab180a57cf6e471015aba4",
  "blockHash": "0x7413181fa20d7edaf0e9983b22fabae71290fceae3a40a227f00a4df688fa90b",
  "blockNumber": 80,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_043e227a",
  "returnValues": {
    "0": "0x4fdb28b5ac0faf7f40b2594a13da0497cc56e5399bd8cb91fcbea02a135bcd56",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x4fdb28b5ac0faf7f40b2594a13da0497cc56e5399bd8cb91fcbea02a135bcd56",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x4fdb28b5ac0faf7f40b2594a13da0497cc56e5399bd8cb91fcbea02a135bcd560000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x69ac710d398496b28a39c7f08424390d7609da4e15ab180a57cf6e471015aba4",
  "blockHash": "0x7413181fa20d7edaf0e9983b22fabae71290fceae3a40a227f00a4df688fa90b",
  "blockNumber": 80,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_9c1992f3",
  "returnValues": {
    "0": "0x160ee1fec464b7e80e15694d24d6948edda83abbce1969999f5c32e29d2ead58",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x160ee1fec464b7e80e15694d24d6948edda83abbce1969999f5c32e29d2ead58",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x160ee1fec464b7e80e15694d24d6948edda83abbce1969999f5c32e29d2ead580000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x69ac710d398496b28a39c7f08424390d7609da4e15ab180a57cf6e471015aba4",
  "blockHash": "0x7413181fa20d7edaf0e9983b22fabae71290fceae3a40a227f00a4df688fa90b",
  "blockNumber": 80,
  "address": "0x966c94e2F5f8CB1939410e1a9ab40B4505B7EF20",
  "type": "mined",
  "id": "log_faa8e9d5",
  "returnValues": {
    "0": "0x68190221b9baddabf2217e81917808696bf38ddd2874e440c1be1497c87b49dc",
    "1": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x68190221b9baddabf2217e81917808696bf38ddd2874e440c1be1497c87b49dc",
    "recipient": "0x9f462d5CEfd5DAc0985E8807E0b1C2e23584fA29",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x68190221b9baddabf2217e81917808696bf38ddd2874e440c1be1497c87b49dc0000000000000000000000009f462d5cefd5dac0985e8807e0b1c2e23584fa2900000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
WebsocketProvider {
  responseCallbacks: {},
  notificationCallbacks:
   [ [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m,
     [36m[Function: requestManagerNotification][39m ],
  connection:
   W3CWebSocket {
     _listeners: {},
     addEventListener: [36m[Function: _addEventListener][39m,
     removeEventListener: [36m[Function: _removeEventListener][39m,
     dispatchEvent: [36m[Function: _dispatchEvent][39m,
     _url: [32m'ws://localhost:8545'[39m,
     _readyState: [33m1[39m,
     _protocol: [90mundefined[39m,
     _extensions: [],
     _bufferedAmount: [33m0[39m,
     _binaryType: [32m'arraybuffer'[39m,
     _connection:
      WebSocketConnection {
        _debug:
         { [Function: debug]
           namespace: [32m'websocket:connection'[39m,
           enabled: [33mfalse[39m,
           useColors: [33mtrue[39m,
           color: [33m2[39m,
           inspectOpts: {},
           printOutput: [36m[Function][39m },
        _events:
         [Object: null prototype] {
           newListener: [36m[Function][39m,
           removeListener: [36m[Function][39m,
           close: [36m[Function][39m,
           message: [36m[Function][39m },
        _eventsCount: [33m4[39m,
        _maxListeners: [90mundefined[39m,
        _pingListenerCount: [33m0[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        protocol: [90mundefined[39m,
        extensions: [],
        remoteAddress: [32m'127.0.0.1'[39m,
        closeReasonCode: [33m-1[39m,
        closeDescription: [1mnull[22m,
        closeEventEmitted: [33mfalse[39m,
        maskOutgoingPackets: [33mtrue[39m,
        maskBytes: <Buffer 63 aa 42 74>,
        frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
        bufferList:
         BufferList {
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           encoding: [90mundefined[39m,
           construct:
            { [Function: Buffer]
              poolSize: [33m8192[39m,
              from: [36m[Function: from][39m,
              of: [36m[Function: of][39m,
              alloc: [36m[Function: alloc][39m,
              allocUnsafe: [36m[Function: allocUnsafe][39m,
              allocUnsafeSlow: [36m[Function: allocUnsafeSlow][39m,
              isBuffer: [36m[Function: isBuffer][39m,
              compare: [36m[Function: compare][39m,
              isEncoding: [36m[Function: isEncoding][39m,
              concat: [36m[Function: concat][39m,
              byteLength: [36m[Function: byteLength][39m,
              [[32mSymbol(kIsEncodingSymbol)[39m]: [36m[Function: isEncoding][39m },
           length: [36m[Getter][39m,
           write: [36m[Function][39m,
           end: [36m[Function][39m,
           push: [36m[Function][39m,
           forEach: [36m[Function][39m,
           join: [36m[Function][39m,
           joinInto: [36m[Function][39m,
           advance: [36m[Function][39m,
           take: [36m[Function][39m,
           toString: [36m[Function][39m },
        currentFrame:
         WebSocketFrame {
           maskBytes: <Buffer 63 aa 42 74>,
           frameHeader: <Buffer 81 7e 01 e5 00 00 00 00 00 00>,
           config:
            { maxReceivedFrameSize: [33m1048576[39m,
              maxReceivedMessageSize: [33m8388608[39m,
              fragmentOutgoingMessages: [33mtrue[39m,
              fragmentationThreshold: [33m16384[39m,
              webSocketVersion: [33m13[39m,
              assembleFragments: [33mtrue[39m,
              disableNagleAlgorithm: [33mtrue[39m,
              closeTimeout: [33m5000[39m,
              tlsOptions: {} },
           maxReceivedFrameSize: [33m1048576[39m,
           protocolError: [33mfalse[39m,
           frameTooLarge: [33mfalse[39m,
           invalidCloseFrameLength: [33mfalse[39m,
           parseState: [33m1[39m,
           closeStatus: [33m-1[39m },
        fragmentationSize: [33m0[39m,
        frameQueue: [],
        connected: [33mtrue[39m,
        state: [32m'open'[39m,
        waitingForCloseResponse: [33mfalse[39m,
        receivedEnd: [33mfalse[39m,
        closeTimeout: [33m5000[39m,
        assembleFragments: [33mtrue[39m,
        maxReceivedMessageSize: [33m8388608[39m,
        outputBufferFull: [33mfalse[39m,
        inputPaused: [33mfalse[39m,
        receivedDataHandler: [36m[Function: bound ][39m,
        _closeTimerHandler: [36m[Function: bound ][39m,
        webSocketVersion: [33m13[39m },
     _client:
      WebSocketClient {
        _events:
         [Object: null prototype] { connect: [36m[Function][39m, connectFailed: [36m[Function][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        config:
         { maxReceivedFrameSize: [33m1048576[39m,
           maxReceivedMessageSize: [33m8388608[39m,
           fragmentOutgoingMessages: [33mtrue[39m,
           fragmentationThreshold: [33m16384[39m,
           webSocketVersion: [33m13[39m,
           assembleFragments: [33mtrue[39m,
           disableNagleAlgorithm: [33mtrue[39m,
           closeTimeout: [33m5000[39m,
           tlsOptions: {} },
        _req: [1mnull[22m,
        protocols: [],
        origin: [90mundefined[39m,
        url:
         Url {
           protocol: [32m'ws:'[39m,
           slashes: [33mtrue[39m,
           auth: [1mnull[22m,
           host: [32m'localhost:8545'[39m,
           port: [32m'8545'[39m,
           hostname: [32m'localhost'[39m,
           hash: [1mnull[22m,
           search: [1mnull[22m,
           query: [1mnull[22m,
           pathname: [1mnull[22m,
           path: [1mnull[22m,
           href: [32m'ws://localhost:8545'[39m },
        secure: [33mfalse[39m,
        base64nonce: [32m'b/t9NPohmy1bMWjOSt0lTQ=='[39m,
        socket:
         Socket {
           connecting: [33mfalse[39m,
           _hadError: [33mfalse[39m,
           _handle:
            TCP {
              reading: [33mtrue[39m,
              onread: [36m[Function: onStreamRead][39m,
              onconnection: [1mnull[22m,
              [[32mSymbol(owner)[39m]: [36m[Circular][39m },
           _parent: [1mnull[22m,
           _host: [32m'localhost'[39m,
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [33mtrue[39m,
              ended: [33mfalse[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mtrue[39m,
              sync: [33mfalse[39m,
              needReadable: [33mtrue[39m,
              emittedReadable: [33mfalse[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mfalse[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events:
            [Object: null prototype] {
              end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
              error: [36m[Function: bound ][39m,
              close: [36m[Function: bound ][39m,
              drain: [36m[Function: bound ][39m,
              pause: [36m[Function: bound ][39m,
              resume: [36m[Function: bound ][39m,
              data: [36m[Function: bound ][39m },
           _eventsCount: [33m7[39m,
           _maxListeners: [90mundefined[39m,
           _writableState:
            WritableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              finalCalled: [33mfalse[39m,
              needDrain: [33mfalse[39m,
              ending: [33mfalse[39m,
              ended: [33mfalse[39m,
              finished: [33mfalse[39m,
              destroyed: [33mfalse[39m,
              decodeStrings: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              length: [33m0[39m,
              writing: [33mfalse[39m,
              corked: [33m0[39m,
              sync: [33mfalse[39m,
              bufferProcessing: [33mfalse[39m,
              onwrite: [36m[Function: bound onwrite][39m,
              writecb: [1mnull[22m,
              writelen: [33m0[39m,
              bufferedRequest: [1mnull[22m,
              lastBufferedRequest: [1mnull[22m,
              pendingcb: [33m0[39m,
              prefinished: [33mfalse[39m,
              errorEmitted: [33mfalse[39m,
              emitClose: [33mfalse[39m,
              bufferedRequestCount: [33m0[39m,
              corkedRequestsFree:
               { next: [1mnull[22m,
                 entry: [1mnull[22m,
                 finish: [36m[Function: bound onCorkedFinish][39m } },
           writable: [33mtrue[39m,
           allowHalfOpen: [33mfalse[39m,
           _sockname: [1mnull[22m,
           _pendingData: [1mnull[22m,
           _pendingEncoding: [32m''[39m,
           server: [1mnull[22m,
           _server: [1mnull[22m,
           parser: [1mnull[22m,
           _httpMessage: [1mnull[22m,
           _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
           timeout: [33m0[39m,
           [[32mSymbol(asyncId)[39m]: [33m6[39m,
           [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
           [[32mSymbol(timeout)[39m]: [1mnull[22m,
           [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
           [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
        response:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: [33mfalse[39m,
              highWaterMark: [33m16384[39m,
              buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
              length: [33m0[39m,
              pipes: [1mnull[22m,
              pipesCount: [33m0[39m,
              flowing: [1mnull[22m,
              ended: [33mtrue[39m,
              endEmitted: [33mfalse[39m,
              reading: [33mfalse[39m,
              sync: [33mtrue[39m,
              needReadable: [33mfalse[39m,
              emittedReadable: [33mtrue[39m,
              readableListening: [33mfalse[39m,
              resumeScheduled: [33mfalse[39m,
              emitClose: [33mtrue[39m,
              destroyed: [33mfalse[39m,
              defaultEncoding: [32m'utf8'[39m,
              awaitDrain: [33m0[39m,
              readingMore: [33mtrue[39m,
              decoder: [1mnull[22m,
              encoding: [1mnull[22m },
           readable: [33mtrue[39m,
           _events: [Object: null prototype] {},
           _eventsCount: [33m0[39m,
           _maxListeners: [90mundefined[39m,
           socket:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           connection:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           httpVersionMajor: [33m1[39m,
           httpVersionMinor: [33m1[39m,
           httpVersion: [32m'1.1'[39m,
           complete: [33mtrue[39m,
           headers:
            { upgrade: [32m'websocket'[39m,
              connection: [32m'Upgrade'[39m,
              [32m'sec-websocket-accept'[39m: [32m'+O/6BsDJko++48lMfWjGpQ5uXsk='[39m },
           rawHeaders:
            [ [32m'Upgrade'[39m,
              [32m'websocket'[39m,
              [32m'Connection'[39m,
              [32m'Upgrade'[39m,
              [32m'Sec-WebSocket-Accept'[39m,
              [32m'+O/6BsDJko++48lMfWjGpQ5uXsk='[39m ],
           trailers: {},
           rawTrailers: [],
           aborted: [33mfalse[39m,
           upgrade: [33mtrue[39m,
           url: [32m''[39m,
           method: [1mnull[22m,
           statusCode: [33m101[39m,
           statusMessage: [32m'Switching Protocols'[39m,
           client:
            Socket {
              connecting: [33mfalse[39m,
              _hadError: [33mfalse[39m,
              _handle:
               TCP {
                 reading: [33mtrue[39m,
                 onread: [36m[Function: onStreamRead][39m,
                 onconnection: [1mnull[22m,
                 [[32mSymbol(owner)[39m]: [36m[Circular][39m },
              _parent: [1mnull[22m,
              _host: [32m'localhost'[39m,
              _readableState:
               ReadableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
                 length: [33m0[39m,
                 pipes: [1mnull[22m,
                 pipesCount: [33m0[39m,
                 flowing: [33mtrue[39m,
                 ended: [33mfalse[39m,
                 endEmitted: [33mfalse[39m,
                 reading: [33mtrue[39m,
                 sync: [33mfalse[39m,
                 needReadable: [33mtrue[39m,
                 emittedReadable: [33mfalse[39m,
                 readableListening: [33mfalse[39m,
                 resumeScheduled: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 awaitDrain: [33m0[39m,
                 readingMore: [33mfalse[39m,
                 decoder: [1mnull[22m,
                 encoding: [1mnull[22m },
              readable: [33mtrue[39m,
              _events:
               [Object: null prototype] {
                 end: [ [36m[Function: onReadableStreamEnd][39m, [36m[Function: bound ][39m ],
                 error: [36m[Function: bound ][39m,
                 close: [36m[Function: bound ][39m,
                 drain: [36m[Function: bound ][39m,
                 pause: [36m[Function: bound ][39m,
                 resume: [36m[Function: bound ][39m,
                 data: [36m[Function: bound ][39m },
              _eventsCount: [33m7[39m,
              _maxListeners: [90mundefined[39m,
              _writableState:
               WritableState {
                 objectMode: [33mfalse[39m,
                 highWaterMark: [33m16384[39m,
                 finalCalled: [33mfalse[39m,
                 needDrain: [33mfalse[39m,
                 ending: [33mfalse[39m,
                 ended: [33mfalse[39m,
                 finished: [33mfalse[39m,
                 destroyed: [33mfalse[39m,
                 decodeStrings: [33mfalse[39m,
                 defaultEncoding: [32m'utf8'[39m,
                 length: [33m0[39m,
                 writing: [33mfalse[39m,
                 corked: [33m0[39m,
                 sync: [33mfalse[39m,
                 bufferProcessing: [33mfalse[39m,
                 onwrite: [36m[Function: bound onwrite][39m,
                 writecb: [1mnull[22m,
                 writelen: [33m0[39m,
                 bufferedRequest: [1mnull[22m,
                 lastBufferedRequest: [1mnull[22m,
                 pendingcb: [33m0[39m,
                 prefinished: [33mfalse[39m,
                 errorEmitted: [33mfalse[39m,
                 emitClose: [33mfalse[39m,
                 bufferedRequestCount: [33m0[39m,
                 corkedRequestsFree:
                  { next: [1mnull[22m,
                    entry: [1mnull[22m,
                    finish: [36m[Function: bound onCorkedFinish][39m } },
              writable: [33mtrue[39m,
              allowHalfOpen: [33mfalse[39m,
              _sockname: [1mnull[22m,
              _pendingData: [1mnull[22m,
              _pendingEncoding: [32m''[39m,
              server: [1mnull[22m,
              _server: [1mnull[22m,
              parser: [1mnull[22m,
              _httpMessage: [1mnull[22m,
              _peername: { address: [32m'127.0.0.1'[39m, family: [32m'IPv4'[39m, port: [33m8545[39m },
              timeout: [33m0[39m,
              [[32mSymbol(asyncId)[39m]: [33m6[39m,
              [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
              [[32mSymbol(timeout)[39m]: [1mnull[22m,
              [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
              [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
           _consuming: [33mfalse[39m,
           _dumped: [33mfalse[39m },
        firstDataChunk: [1mnull[22m },
     onerror: [36m[Function][39m,
     onclose: [36m[Function][39m,
     onmessage: [36m[Function][39m },
  lastChunk: [1mnull[22m }
Working from account  0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
contract address: 0xDadF3ae03219177284c870F620e4CBC8a6EDB552
starting event monitoring on contract: 0x1AEA430B19dcA50307E1624bC6caf30875C2F23f
(node:20724) UnhandledPromiseRejectionWarning: MongoNetworkError: failed to connect to server [http:27017] on first connect [MongoNetworkError: getaddrinfo ENOTFOUND http http:27017]
    at Pool.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/topologies/server.js:564:11)
    at Pool.emit (events.js:182:13)
    at Connection.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/pool.js:317:12)
    at Object.onceWrapper (events.js:273:13)
    at Connection.emit (events.js:182:13)
    at Socket.<anonymous> (/home/sergio/workspace/Ammbr/MeshWifiDappOracle/node_modules/mongodb-core/lib/connection/connection.js:246:50)
    at Object.onceWrapper (events.js:273:13)
    at Socket.emit (events.js:182:13)
    at emitErrorNT (internal/streams/destroy.js:82:8)
    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)
    at process.internalTickCallback (internal/process/next_tick.js:72:19)
(node:20724) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:20724) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
http://10.228.207.37:3000
http://10.228.207.37:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://10.228.207.37:3000
http://10.228.207.37:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0xb5d7dbd03cff61097f69c41cadc2d6d89cf2d93691b13f62ffbfa9c08d3e691c",
  "blockHash": "0x44b9828c09a3b790027d683915af6118f620a5e9f5118a4332df2b708ba07b88",
  "blockNumber": 31,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_61d72d84",
  "returnValues": {
    "0": "0x331c2b015d7a1cc4fe49dd7cd1861645f16592628166636c53d8ae8fff8900f8",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "5000",
    "5": "1000000",
    "6": "1",
    "id": "0x331c2b015d7a1cc4fe49dd7cd1861645f16592628166636c53d8ae8fff8900f8",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "5000",
    "funds": "1000000",
    "pricePerMB": "1"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x331c2b015d7a1cc4fe49dd7cd1861645f16592628166636c53d8ae8fff8900f800000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 5000;
Funds: 1000000;
PricePerMB: 1;

New price is: 200
>>> [object Object]
EVM call result:
 [object Object]
http://10.228.207.37:3000
http://10.228.207.37:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://10.228.207.37:3000
http://10.228.207.37:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x1f868331f66eac2790a3b891b0c0b672f3f1a7763dc77a9415c3985b5b4a3fd8",
  "blockHash": "0x3b231a8450acd47c24827d51287736f57f5b164eda192a22dcb4863ab8ebdd98",
  "blockNumber": 38,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_6f95cbbb",
  "returnValues": {
    "0": "0x710e8759e3720755adaa3256f297265031d47a5433538a5fb3bc26308e7c67e7",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "955000",
    "5": "995000",
    "6": "191",
    "id": "0x710e8759e3720755adaa3256f297265031d47a5433538a5fb3bc26308e7c67e7",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "955000",
    "funds": "995000",
    "pricePerMB": "191"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x710e8759e3720755adaa3256f297265031d47a5433538a5fb3bc26308e7c67e700000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000e927800000000000000000000000000000000000000000000000000000000000f2eb800000000000000000000000000000000000000000000000000000000000000bf0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 955000;
Funds: 995000;
PricePerMB: 191;

New price is: 191
>>> [object Object]
EVM call result:
 [object Object]
http://10.228.207.37:3000
http://10.228.207.37:3000/owner?id=1
>>> [object Object]
status code: 200
Traffic (MB): 3000
status code: 200
Owner: 0x28b17326d08992f16d382db2923d0d8b4ff8adb0
http://10.228.207.37:3000
http://10.228.207.37:3000/owner?id=2
>>> [object Object]
status code: 200
Traffic (MB): 2000
status code: 200
Owner: 0x77bf44c84ab15150baa1ae772836349788a7cf01
EVM call result:
 [object Object]
EVM call result:
 [object Object]
event data: {
  "logIndex": 0,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x16f87a98f13c79048bbe6e0b8243cc24ed9ad7822fbfe63b6e90945877d8a544",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_1d40b26e",
  "returnValues": {
    "0": "0x557b1440c340de5ace4d391b6a2d6fb1fb949ed188c5f9849077381bd45c2c02",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "calculate_proportional",
    "3": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "4": "20000",
    "5": "40000",
    "6": "50000",
    "id": "0x557b1440c340de5ace4d391b6a2d6fb1fb949ed188c5f9849077381bd45c2c02",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "calculate_proportional",
    "originator": "0x77bF44C84aB15150BAA1aE772836349788a7cF01",
    "owed": "20000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x557b1440c340de5ace4d391b6a2d6fb1fb949ed188c5f9849077381bd45c2c0200000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000077bf44c84ab15150baa1ae772836349788a7cf010000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 20000;
Funds: 40000;
Total owed: 50000;

Proportional: 16000;
Provider: 0x77bF44C84aB15150BAA1aE772836349788a7cF01
>>> [object Object]
event data: {
  "logIndex": 1,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x16f87a98f13c79048bbe6e0b8243cc24ed9ad7822fbfe63b6e90945877d8a544",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_70c42242",
  "returnValues": {
    "0": "0x22e3533ef1080e1d791cf5c3bea1133fd92b0e8291e7b369d757e11d59ba22f8",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "calculate_proportional",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "30000",
    "5": "40000",
    "6": "50000",
    "id": "0x22e3533ef1080e1d791cf5c3bea1133fd92b0e8291e7b369d757e11d59ba22f8",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "calculate_proportional",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "30000",
    "funds": "40000",
    "pricePerMB": "50000"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x22e3533ef1080e1d791cf5c3bea1133fd92b0e8291e7b369d757e11d59ba22f800000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb000000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000001663616c63756c6174655f70726f706f7274696f6e616c",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 30000;
Funds: 40000;
Total owed: 50000;

Proportional: 24000;
Provider: 0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0
>>> [object Object]
event data: {
  "logIndex": 2,
  "transactionIndex": 0,
  "transactionHash": "0x351c17720112cfd58bd11699fb641b40bcf452eb3fd889be5f9d8f58993c75ab",
  "blockHash": "0x16f87a98f13c79048bbe6e0b8243cc24ed9ad7822fbfe63b6e90945877d8a544",
  "blockNumber": 45,
  "address": "0x1AEA430B19dcA50307E1624bC6caf30875C2F23f",
  "type": "mined",
  "id": "log_2255b365",
  "returnValues": {
    "0": "0x6038c9aafbeda8b039163b1ee2bf0f2b9fa049058c6fb26d82e2e2974ff1ee13",
    "1": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "2": "recalculate_max_price",
    "3": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "4": "50000",
    "5": "40000",
    "6": "10",
    "id": "0x6038c9aafbeda8b039163b1ee2bf0f2b9fa049058c6fb26d82e2e2974ff1ee13",
    "recipient": "0x11fb1eB117F6fb5fAedaDf15fA88ca3d947E9aa4",
    "queryType": "recalculate_max_price",
    "originator": "0x28b17326D08992f16D382DB2923d0D8B4ff8AdB0",
    "owed": "50000",
    "funds": "40000",
    "pricePerMB": "10"
  },
  "event": "_Incoming",
  "signature": "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443",
  "raw": {
    "data": "0x6038c9aafbeda8b039163b1ee2bf0f2b9fa049058c6fb26d82e2e2974ff1ee1300000000000000000000000011fb1eb117f6fb5faedadf15fa88ca3d947e9aa400000000000000000000000000000000000000000000000000000000000000e000000000000000000000000028b17326d08992f16d382db2923d0d8b4ff8adb0000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000015726563616c63756c6174655f6d61785f7072696365",
    "topics": [
      "0x728621a284344db905b6f900cd01f5cf758a0a4b0336a7979ab7943f1d786443"
    ]
  }
}
Owed: 50000;
Funds: 40000;
PricePerMB: 10;

New price is: 8
>>> [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
EVM call result:
 [object Object]
